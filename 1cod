<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
  <title>Calculadora ESPONT — UI Mejorada</title>
  <style>
    :root{
      --brand:#d01137;
      --bg:#0f1115;
      --card:#161a22;
      --stroke:#232938;
      --text:#ecf0f1;
      --muted:#a8b0bb;
      --chip:#202633;
      --ok:#2ecc71;
      --warn:#f1c40f;
      --err:#e74c3c;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family:system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
      background:linear-gradient(180deg,#0b0e14,#111521);
      color:var(--text);
    }
    
    
    
    /* --- Menú lateral izquierdo tipo rail --- */
    .left-rail{
      position:fixed; left:16px; top:72px; bottom:16px; width:68px;
      background:linear-gradient(180deg,#161a22cc,#0f121acc);
      border:1px solid var(--stroke);
      border-radius:22px;
      backdrop-filter: blur(16px) saturate(140%);
      padding:10px 8px; display:flex; flex-direction:column; gap:10px; align-items:center;
      z-index:65;
      box-shadow:0 18px 42px rgba(0,0,0,.35);
      transition: width .25s ease;
      overflow:hidden;
    }
    .left-rail:hover{ width:220px; }
    .left-rail .rail-head{
      width:42px; height:42px; border-radius:14px; display:grid; place-items:center;
      background:radial-gradient(circle at 30% 30%, #ff5577, var(--brand));
      color:#fff; font-weight:900; box-shadow:0 10px 20px rgba(208,17,55,.35);
      margin-bottom:6px;
    }
    .left-rail .rail-list{ width:100%; display:flex; flex-direction:column; gap:8px; }
    .left-rail .rail-item{
      width:100%; display:flex; align-items:center; gap:10px; cursor:pointer;
      padding:10px; border-radius:14px; border:1px solid #263145; background:#0f121a;
      color:#cfd6de; transition:.2s;
    }
    .left-rail .rail-item:hover{ border-color:#2a3347; }
    .left-rail .rail-item.active{ color:#fff; border-color:var(--brand); box-shadow:0 8px 20px rgba(208,17,55,.28); }
    .left-rail .rail-ico{
      min-width:28px; min-height:28px; border-radius:999px; display:grid; place-items:center;
      background:#111826; border:1px solid #263145;
    }
    .left-rail .rail-label{ white-space:nowrap; opacity:0; transform:translateX(-6px); transition:.2s; }
    .left-rail:hover .rail-label{ opacity:1; transform:none; }
    @media(max-width: 900px){
      .left-rail{ display:none; }
      main.wrap{ padding-left:16px; }
    }
    /* Adjust content margins so rails don't cover */
    @media(min-width:901px){
      main.wrap{ padding-left:96px; padding-right:276px; } /* left rail + right menu widths */
    }

    /* --- Menú lateral derecho de categorías --- */
    .side-menu{
      position:fixed; right:16px; top:72px; bottom:16px; width:240px;
      background:linear-gradient(180deg,#161a22cc,#0f121acc);
      border:1px solid var(--stroke);
      border-radius:18px;
      backdrop-filter: blur(16px) saturate(140%);
      padding:12px; display:flex; flex-direction:column; gap:10px;
      z-index:70;
      box-shadow:0 18px 42px rgba(0,0,0,.35);
    }
    .side-menu .title{
      display:flex; align-items:center; gap:8px; font-weight:900; color:#fff;
    }
    .side-menu .list{ display:flex; flex-direction:column; gap:10px; overflow:auto; padding-right:2px; }
    .side-menu .item{
      appearance:none; background:#0f121a; border:1px solid #22293a;
      border-radius:14px; color:#cfd6de; padding:10px 12px; cursor:pointer;
      display:flex; align-items:center; gap:12px; text-align:left;
      transition:.2s;
    }
    .side-menu .item:hover{ border-color:#2a3347; }
    .side-menu .item.active{
      color:#fff; border-color:var(--brand); box-shadow:0 10px 26px rgba(208,17,55,.28);
      background:linear-gradient(180deg,#1a0e14,#0f121a);
    }
    .side-menu .icon{
      width:28px; height:28px; border-radius:999px; display:grid; place-items:center;
      background:#111826; border:1px solid #263145;
    }
    @media(max-width: 900px){
      .side-menu{ display:none; }
    }


    /* Top App Bar */
    .appbar{
      position:sticky; top:0; z-index:50;
      backdrop-filter:saturate(150%) blur(16px);
      background:linear-gradient(90deg, rgba(208,17,55,.22), rgba(17,20,31,.8));
      border-bottom:1px solid rgba(255,255,255,.06);
      display:flex; align-items:center; gap:12px;
      padding:12px 16px;
    }
    .logo{
      width:36px; height:36px; border-radius:10px;
      background:radial-gradient(circle at 30% 30%, #ff5577, var(--brand));
      display:grid; place-items:center; font-weight:900; color:#fff;
      box-shadow:0 6px 18px rgba(208,17,55,.35);
      letter-spacing:.5px;
    }
    .app-title{ font-weight:800; letter-spacing:.3px; }
    .pill{
      margin-left:auto; font-size:12px; color:#fff; background:#ffffff22; padding:6px 10px; border-radius:999px; border:1px solid #ffffff33;
    }

    /* Layout */
    .wrap{ max-width:1100px; margin:0 auto; padding:16px; }
    .grid{
      display:grid; gap:16px;
      grid-template-columns: 1fr;
    }
    @media(min-width:900px){
      .grid{ grid-template-columns: 1.1fr .9fr; }
    }

    /* Card */
    .card{
      background:var(--card);
      border:1px solid var(--stroke);
      border-radius:16px;
      box-shadow:0 10px 30px rgba(0,0,0,.25);
      padding:16px;
    }
    .card h3{ margin:0 0 12px; font-size:16px; color:#fff; }
    label{ font-size:13px; color:var(--muted); display:block; margin:10px 0 6px; }
    input, select{
      width:100%; padding:12px 12px; border-radius:12px; border:1px solid var(--stroke);
      background:#0f121a; color:#fff; outline:none;
    }
    input[type="range"]{ padding:0; height:36px; }

    /* Category chips */
    .chips{
      display:flex; gap:8px; overflow:auto hidden; padding-bottom:6px; scrollbar-width:none;
    }
    .chips::-webkit-scrollbar{ display:none; }
    .chip{
      flex:0 0 auto; padding:10px 14px; border-radius:999px; border:1px solid var(--stroke);
      background:var(--chip); color:#cfd6de; cursor:pointer; font-weight:700; font-size:14px;
      transition:.2s;
    }
    .chip.active{ background:var(--brand); border-color:var(--brand); color:#fff; box-shadow:0 6px 16px rgba(208,17,55,.35); }

    /* Option checks */
    .option-check{ display:flex; align-items:center; gap:10px; margin:6px 0; }
    .option-check input{ width:auto; }
    .color-dot{ width:10px; height:10px; border-radius:50%; background:#fff; border:1px solid #0002; }

    /* Selected badges */
    .badges{ display:flex; flex-wrap:wrap; gap:8px; margin-top:8px; }
    .badge{
      display:inline-flex; align-items:center; gap:8px; padding:8px 12px; border-radius:999px;
      background:#ffffff18; color:#fff; font-size:12px; border:1px solid #ffffff2e;
    }
    .badge .x{ cursor:pointer; padding:0 8px; border-radius:999px; background:#ffffff22; }

    /* Editor */
    #toggleEditor{
      margin:6px 0 8px; padding:10px 12px; border-radius:12px;
      border:1px dashed var(--brand); background:#19070c; color:#ffced8; cursor:pointer; font-weight:800;
    }
    #editorPreciosWrap{ margin:8px 0 0; border:1px solid #411320; background:#180a0f; border-radius:14px; padding:12px; }
    #editorPreciosWrap.collapsed{ display:none; }
    #editorTabla{ width:100%; border-collapse:collapse; font-size:13px; color:#e7dbe0; }
    #editorTabla th,#editorTabla td{ border:1px solid #2a1a22; padding:8px; }
    #editorTabla input{ background:#0f121a; border:1px solid #2a1f2a; color:#fff; border-radius:8px; padding:8px; }

    /* Sticky Bottom Summary */
    .bottom-bar{
      position:sticky; bottom:0; z-index:60; margin-top:16px;
      background:linear-gradient(180deg, rgba(16,18,28,.0), rgba(16,18,28,.8) 20%, rgba(16,18,28,1) 60%);
      padding:12px 16px 16px;
      border-top:1px solid #ffffff14;
    }
    .sheet{
      display:flex; flex-direction:column; gap:8px;
      background:linear-gradient(90deg,#2a0b15,#1a2031);
      border:1px solid #491624;
      border-radius:16px;
      padding:12px;
      box-shadow:0 10px 30px rgba(208,17,55,.35);
    }
    .row{ display:flex; flex-wrap:wrap; gap:12px; align-items:center; justify-content:space-between; }
    .k{ color:#ffd7df; font-size:12px; }
    .v{ font-weight:900; letter-spacing:.3px; }
    .total{ font-size:20px; color:#fff; }

    .btn{
      appearance:none; border:0; border-radius:12px; padding:12px 16px; font-weight:900; cursor:pointer;
    }
    .btn-primary{ background:linear-gradient(180deg,#ff577a,var(--brand)); color:#fff; box-shadow:0 10px 24px rgba(208,17,55,.35); }
    .btn-ghost{ background:#ffffff10; color:#fff; border:1px solid #ffffff2a; }

    
    /* Ocultar chips y título "Categorías" del panel izquierdo; el menú derecho toma el control */
    #categorias{ display:none !important; }
    .grid > section.card > h3{ display:none !important; }


    /* Utility */
    .muted{ color:var(--muted); }
    .section-title{ margin:0 0 8px; font-size:13px; color:#c6cbd3; font-weight:800; letter-spacing:.3px; text-transform:uppercase; }

  
/* === VISTAS === */
.hidden{display:none !important;}
#homeView{
  background: radial-gradient(1000px 500px at 20% -10%, rgba(208,17,55,.25), transparent),
              linear-gradient(180deg,#0b0e14,#111521);
  border:1px solid var(--stroke);
  border-radius:16px; padding:28px;
  text-align:center;
}
#homeView h1{margin:4px 0 8px; font-size:28px; color:#fff; letter-spacing:.3px;}
#homeView p{color:var(--muted); margin:0; font-size:14px;}
#homeView .big-logo{
  width:72px; height:72px; border-radius:18px; margin:0 auto 10px;
  background:radial-gradient(circle at 30% 30%, #ff5577, var(--brand));
  display:grid; place-items:center; color:#fff; font-weight:900; box-shadow:0 10px 28px rgba(208,17,55,.35);
}


/* === Catálogo (Productos) === */
.catalog-grid{display:grid;gap:12px}
@media(min-width:700px){.catalog-grid{grid-template-columns:1fr 1fr}}
.catalog-card{
  background:#111521;border:1px solid #22293a;border-radius:16px;padding:14px;
  display:flex;flex-direction:column;gap:10px;
}
.catalog-head{display:flex;align-items:center;justify-content:space-between;gap:8px}
.catalog-title{font-weight:800}
.price{font-size:20px;font-weight:900}
.stock{font-size:12px;color:var(--muted)}
.catalog-actions{display:flex;gap:8px;flex-wrap:wrap}
.btn-sm{padding:8px 10px;border-radius:10px;border:1px solid #2a3347;background:#0f121a;color:#cfd6de;cursor:pointer}
.btn-sm.primary{background:linear-gradient(180deg,#ff577a,var(--brand));color:#fff;border:0;box-shadow:0 8px 18px rgba(208,17,55,.3)}
.editor-box{border:1px dashed #2a3347;border-radius:12px;padding:10px;background:#0d1118}
.editor-row{display:flex;gap:8px}
.editor-row input{flex:1}
.badge-muted{font-size:11px;padding:4px 8px;border-radius:999px;background:#ffffff10;border:1px solid #ffffff1f;color:#cfd6de}

/* === Facturas === */
.facturas-toolbar{display:flex;gap:8px;flex-wrap:wrap;align-items:center;margin-bottom:10px}
.fact-grid{display:grid;gap:12px}
@media(min-width:800px){.fact-grid{grid-template-columns:1fr 1fr}}
.fact-card{background:#0f121a;border:1px solid #22293a;border-radius:16px;padding:12px;display:flex;flex-direction:column;gap:8px}
.fact-row{display:flex;justify-content:space-between;gap:8px}
.fact-id{font-size:12px;color:#aab2bd}
.fact-total{font-size:18px;font-weight:900}
.fact-status{font-size:11px;padding:4px 8px;border-radius:999px;background:#ffffff10;border:1px solid #ffffff1f;color:#cfd6de}


/* Toast */
.toast{position:fixed;right:18px;bottom:18px;z-index:200;background:#111521;border:1px solid #2a3347;color:#fff;
padding:10px 14px;border-radius:12px;box-shadow:0 10px 26px rgba(0,0,0,.35);opacity:0;transform:translateY(8px);
transition:.25s;}
.toast.show{opacity:1;transform:none}


/* === Facturas layout + form === */
.facturas-layout{display:grid;gap:12px}
@media(min-width:1000px){.facturas-layout{grid-template-columns:1.2fr .8fr}}
.invoice-card{
  background:#0f121a;border:1px solid #22293a;border-radius:16px;padding:14px;
  box-shadow:0 10px 24px rgba(0,0,0,.25);
  position:sticky; top:86px; align-self:start;
}
.invoice-card h4{margin:0 0 8px;color:#fff}
.invoice-row{display:flex;gap:8px;align-items:center;margin:6px 0}
.invoice-row input, .invoice-row select, .invoice-row textarea{
  width:100%; padding:10px 12px; border-radius:12px; border:1px solid var(--stroke);
  background:#0f121a; color:#fff; outline:none;
}
.invoice-small{font-size:12px;color:var(--muted)}
.invoice-total{display:flex;justify-content:space-between;align-items:center;margin-top:10px}
.invoice-total .num{font-size:22px;font-weight:900}


/* ====== MOBILE (<=640px) ====== */
@media (max-width: 640px){
  :root{ --safe-bottom: env(safe-area-inset-bottom, 0px); }
  .wrap{ padding:12px; }
  .grid{ grid-template-columns: 1fr !important; }
  .fact-grid{ grid-template-columns: 1fr !important; }
  .facturas-layout{ grid-template-columns: 1fr !important; }
  .invoice-card{
    position: fixed; left: 0; right: 0; bottom: 0;
    border-radius: 16px 16px 0 0;
    transform: translateY(100%);
    transition: transform .25s ease, box-shadow .25s ease;
    max-height: 74vh; overflow: auto; z-index: 80;
    padding-bottom: calc(14px + var(--safe-bottom));
  }
  .invoice-card.open{ transform: translateY(0); box-shadow: 0 -18px 40px rgba(0,0,0,.45); }
  .invoice-card .drag-handle{
    width: 48px; height: 4px; border-radius: 999px; background: #ffffff33;
    margin: 4px auto 8px;
  }
  .mobile-fab{
    position: fixed; right: 16px; bottom: calc(16px + var(--safe-bottom));
    z-index: 85; border-radius: 999px; padding: 14px 16px;
    font-weight: 900; border: 0;
    background: linear-gradient(180deg,#ff577a,var(--brand)); color: #fff;
    box-shadow: 0 10px 24px rgba(208,17,55,.35);
  }
  .btn-sm{ padding: 12px 14px; border-radius: 12px; }
  input, select, textarea{ font-size: 16px; } /* evitar zoom iOS */
  .bottom-bar{ position: fixed; left: 0; right: 0; bottom: 0; z-index: 60; }
  .side-menu{ display:none !important; }
  .left-rail{
    position: fixed; left: -100%; top: calc(8px + var(--sa-top)); bottom: calc(80px + var(--sa-bot));
    width: 86vw; max-width: 420px;
    background: #0b1024ee; border-right: 1px solid #ffffff1a; border-radius: 16px;
    box-shadow: 0 12px 32px #00000066; backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    overflow: auto; z-index: 2500; transition: left .25s ease;
  }
  .left-rail.open{ left: 10px; }
  .mb-overlay{
    position: fixed; inset: 0; background: #0009; z-index: 2400; display: none;
  }
  .mb-overlay.show{ display:block; }
  .appbar{ position: sticky; top: 0; }
}


/* ====== Bottom Nav (Mobile) ====== */
@media (max-width: 640px){
  body{ padding-bottom: 72px; } /* space for bar */
  .bottom-nav{
    position: fixed; left: 0; right: 0; bottom: 0; z-index: 100;
    height: 56px; display: grid; grid-template-columns: repeat(4, 1fr);
    background: linear-gradient(180deg,#141823,#0b0f17);
    border-top: 1px solid #1f2937;
    padding-bottom: env(safe-area-inset-bottom, 0px);
  }
  .bottom-nav button{
    appearance: none; border: 0; background: transparent; color: var(--text);
    font-size: 12px; display:flex; align-items:center; justify-content:center; gap:6px;
  }
  .bottom-nav button.active{
    color: #fff; font-weight: 800;
    background: linear-gradient(180deg,#1b2231,#0b0f17);
  }
}


/* Solo Metálica en verde cuando está activa en el menú derecho */
.side-menu .item.metalica.active{
  border-color: var(--ok) !important;
  box-shadow: 0 10px 26px rgba(46,204,113,.28) !important;
  background: linear-gradient(180deg,#0f1a14,#0f121a) !important;
}


/* Realce verde para Metálica */
#metalicaBox.is-active{
  border-color: var(--ok) !important;
  box-shadow: 0 0 0 1px rgba(46,204,113,.35) inset, 0 10px 26px rgba(46,204,113,.18);
}
#metalicaBox.is-active .section-title{ color:#c6ffd9; }
#metalicaBox.included{
  background: linear-gradient(180deg,#0d1611,#0f121a) !important;
  border-color: var(--ok) !important;
  box-shadow: 0 0 0 1px rgba(46,204,113,.45) inset, 0 12px 30px rgba(46,204,113,.22);
}


/* --- Title pill for 'Mis productos' --- */
.side-menu .title.title-pill{
  background: linear-gradient(180deg,#ff3f5e,#b31d32);
  color: #fff;
  font-weight: 800;
  border-radius: 16px;
  padding: 12px 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.125rem; /* a little bigger */
  letter-spacing: .2px;
  margin-bottom: 12px;
  box-shadow: 0 6px 22px rgba(227, 27, 52, .24);
}
/* Remove gap reserved by the old logo if any */
.side-menu .title .logo{ display:none !important; }


/* --- Wide red badge for PRODUCTOS --- */
.side-menu .title .logo.logo-wide{
  display: block !important;
  width: 100%;
  height: auto;
  padding: 10px 14px;
  border-radius: 12px;
  text-align: center;
  font-weight: 900;
  letter-spacing: .6px;
  text-transform: uppercase;
  font-size: 1rem;
}


/* Ocultar facturas en INICIO */
body[data-mode="inicio"] #facturasView,
.view-inicio #facturasView{ display: none !important; }


/* === Factura Activa (líneas) === */
.fa-card{background:#0f121a;border:1px solid #22293a;border-radius:16px;padding:12px;display:flex;flex-direction:column;gap:10px}
.fa-table{width:100%;border-collapse:collapse;font-size:13px;color:#e7eaf0}
.fa-table th,.fa-table td{border:1px solid #283244;padding:8px;text-align:left}
.fa-table th{background:#131a26;color:#cfd6de}
.fa-actions button{margin-right:6px}
.t-right{text-align:right}
.badge-iva{font-size:11px;padding:2px 6px;border-radius:999px;background:#ffffff10;border:1px solid #ffffff1f;color:#cfd6de}
.btn-success{background:linear-gradient(180deg,#38c172,#2e7d32);color:#fff !important;box-shadow:0 10px 24px rgba(46,125,50,.35)}


/* Ocultar panel "Nueva factura rápida" (fallback) */
#facturaRapida, .factura-rapida, .quick-invoice-card { display:none !important; }


/* Ocultar "Nueva factura rápida" (panel lateral) */
#invoiceQuick{ display:none !important; }


/* === Historial de facturas (lista estilo trading) === */
.fa-hist .status-pill{font-size:11px;border-radius:999px;padding:2px 8px;border:1px solid #ffffff15;color:#cfd6de;background:#ffffff0f}
.fa-hist .status-pill.ok{background:#1e402a;border-color:#2e7d32;color:#9be1ad}
.fa-hist .status-pill.pending{background:#40351e;border-color:#b8831a;color:#ffd37e}
.fa-hist .row-actions button{margin-right:6px}
.fa-hist .muted{opacity:.7}
/* Ocultar Factura activa cuando trabajamos por facturas separadas */
body.split-invoices #facturaActivaCard{ display:none !important; }


/* Detalle de ítems en Historial */
.fa-hist .hist-detail-row td{ background:#111824; padding:0 }
.fa-hist .detail-wrap{ padding:8px 10px }
.fa-hist .detail-table{ width:100%; border-collapse:collapse; font-size:12px }
.fa-hist .detail-table th,.fa-hist .detail-table td{ border:1px solid #283244; padding:6px }


/* Ocultar input/botón de '+ Nueva factura' del header original */
input[placeholder*="Nueva factura"],
.new-invoice-input { display: none !important; }


/* Estados en historial + total verde cuando Aprobado */
.fa-hist .status-pill.aprobado{ background:#1e402a; border-color:#2e7d32; color:#9be1ad }
.fa-hist .status-pill.anulado{ background:#402222; border-color:#b32d2d; color:#f2aaaa }
.fa-hist .total-approved{ color:#9be1ad; font-weight:700 }
.detail-wrap .row-mini{ display:flex; gap:12px; align-items:center; margin-top:8px; }
.detail-wrap .row-mini input[type="number"]{ width:110px }


/* Ocultar por completo el grid antiguo de facturas (tarjetas y '+ Nueva factura') */
#facturasView .facturas-layout,
#facturasView .fact-row,
#facturasView .invoice-card:not(#invoiceQuick) {
  display: none !important;
}


/* Fila completa en verde cuando Pagado */
.fa-hist tr.row-paid td{ background:#14271c !important; color:#b9f6c9 !important; }
.fa-hist tr.row-paid td .status-pill{ background:#1e402a; border-color:#2e7d32; color:#9be1ad; }
.fa-hist .status-pill.pagado{ background:#1e402a; border-color:#2e7d32; color:#9be1ad }


/* Encabezado 'Nombre' (banda roja) - ADICIÓN */
.fa-hist .hist-name-row td{
  background:#1a1216;
  color:#ffdfe4;
  font-weight:600;
  padding:6px 10px;
  border:1px solid #2b151a;
  border-left:3px solid #ff4d6d;
}
/* Chip 'Total final' discreto - ADICIÓN */
.fa-hist .total-chip{
  font-size:12px; padding:2px 8px; border-radius:999px;
  background:#111824; color:#e7eaf0; border:1px solid #283244;
}


/* Chip de ganancia (discreto) */
.gain-chip{
  font-size:12px; padding:2px 8px; border-radius:999px;
  background:#111824; color:#e7eaf0; border:1px solid #283244; margin-right:8px;
}

/* ===== Mobile kit (no rompe tu CSS) ===== */
:root{
  --sa-top: env(safe-area-inset-top);
  --sa-bot: env(safe-area-inset-bottom);
}
@media (max-width: 520px){
  .left-rail{
    position: fixed; left: -100%; top: calc(8px + var(--sa-top)); bottom: calc(80px + var(--sa-bot));
    width: 86vw; max-width: 420px;
    background: #0b1024ee; border-right: 1px solid #ffffff1a; border-radius: 16px;
    box-shadow: 0 12px 32px #00000066; backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    overflow: auto; z-index: 2500; transition: left .25s ease;
  }
  .left-rail.open{ left: 10px; }
  .mb-overlay{
    position: fixed; inset: 0; background: #0009; z-index: 2400; display: none;
  }
  .mb-overlay.show{ display:block; }
  main.wrap{ padding: calc(10px + var(--sa-top)) 12px calc(110px + var(--sa-bot)); }
  .grid{ grid-template-columns: 1fr !important; }
  .row .btn{ min-height: 44px; }
}
.mb-nav{
  position: fixed; left:0; right:0; bottom:0;
  padding: 10px 12px calc(12px + var(--sa-bot));
  display: grid; grid-template-columns: 1fr 1fr auto 1fr 1fr; gap:10px;
  background: linear-gradient(180deg, #0c1530cc, #060b1bdd);
  border-top: 1px solid #ffffff1c;
  backdrop-filter: blur(18px) saturate(160%);
  -webkit-backdrop-filter: blur(18px) saturate(160%);
  z-index: 1100;
}
.mb-nav a, .mb-nav button{
  height: 48px; border-radius: 14px; border:1px solid #ffffff16;
  background: #ffffff10; color:#dbe8ff; font-weight: 600; font-size: 15px;
  touch-action: manipulation;
}
.mb-nav a.active{ outline: 2px solid #8a6bff66; }
.mb-nav .fab{
  height: 56px; border-radius: 16px; border:0;
  background: linear-gradient(135deg,#7a4cff 0%,#00d1ff 100%);
  color:#fff; font-weight:800;
  box-shadow: 0 10px 28px #4a40ff66, 0 0 0 6px #7a4cff22;
}

/* ===== Target 6.27" portrait (aprox 19.5:9) ===== */
:root{
  /* Calculado: ancho≈2.6275in, alto≈5.6929in para 6.27" diagonal */
  --target-portrait-w: 2.6275in;
  --target-portrait-h: 5.6929in;
}

/* Simulador opcional en desktop: añade class="simulate627" a <body> para ver el tamaño físico */
body.simulate627{
  display:flex; align-items:center; justify-content:center;
  min-height: 100vh; background:#000 radial-gradient(circle at 50% 10%, #162148 0%, transparent 60%) no-repeat;
}
body.simulate627 #appViewport{
  width: var(--target-portrait-w);
  height: var(--target-portrait-h);
  border-radius: 24px;
  overflow: hidden;
  border: 1px solid #ffffff22;
  box-shadow: 0 18px 48px #000000aa, inset 0 1px 0 #ffffff0f;
}

/* En móviles reales: ocupa toda la pantalla */
@media (max-width: 520px){
  #appViewport{ width: 100%; height: 100dvh; }
  html, body{ height: 100%; }
  body{ max-width: 430px; margin: 0 auto; }
}
</style>
</head>
<body>
<button id="mbToggle" style="position:fixed;left:14px;top:calc(12px + env(safe-area-inset-top));z-index:2600;height:42px;padding:0 14px;border-radius:12px;border:1px solid #ffffff18;background:#0c1330cc;color:#eaf2ff;font-weight:700;backdrop-filter:blur(12px);-webkit-backdrop-filter:blur(12px);">☰</button>
<div class="mb-overlay" id="mbOverlay"></div>
<div id="appViewport"> class="split-invoices">
  <header class="appbar">
    <div class="logo">ES</div>
    <div>
      <div class="app-title">Calculadora de Precios</div>
      <div class="muted" style="font-size:12px;">ESPONT · UI estilo app</div>
    </div>
    <span class="pill">v2.0 · TEDI©</span>
  </header>

  <nav class="left-rail" id="leftRail">
    <div class="rail-head">ES</div>
    <div class="rail-list">
      <div class="rail-item" data-target="#top">
        <div class="rail-ico">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path d="M3 11l9-7 9 7v9a1 1 0 0 1-1 1h-5v-6H9v6H4a1 1 0 0 1-1-1v-9z" stroke="currentColor" stroke-width="1.5"/>
          </svg>
        </div>
        <span class="rail-label">Inicio</span>
      </div>
      <div class="rail-item" data-target="#opcionesSec">
        <div class="rail-ico">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <rect x="4" y="4" width="16" height="16" rx="3" stroke="currentColor" stroke-width="1.5"/>
            <path d="M8 12h8M12 8v8" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          </svg>
        </div>
        <span class="rail-label">Calculadora</span>
      </div>
      <div class="rail-item" data-target="#paramSec">
        <div class="rail-ico">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <circle cx="12" cy="12" r="8" stroke="currentColor" stroke-width="1.5"/>
            <path d="M8 14.5a6 6 0 0 1 8 0" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
            <circle cx="12" cy="10" r="3" stroke="currentColor" stroke-width="1.5"/>
          </svg>
        </div>
        <span class="rail-label">Productos</span>
      </div>
      <div class="rail-item" data-target="#seleccionSec">
        <div class="rail-ico">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path d="M9 11l2 2 4-4" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/>
            <rect x="4" y="4" width="16" height="16" rx="3" stroke="currentColor" stroke-width="1.4"/>
          </svg>
        </div>
        <span class="rail-label">Seleccionados</span>
      </div>
      <div class="rail-item" data-target="#facturasView">
        <div class="rail-ico">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
            <path d="M4 7h16M4 12h16M4 17h10" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          </svg>
        </div>
        <span class="rail-label">Facturas</span>
      </div>
    </div>
  </nav>


  <nav class="side-menu" id="sideMenu">
    <div class="title"><div class="logo logo-wide">PRODUCTOS</div></div>
    <div class="list" id="sideMenuList"></div>
  </nav>


  <main class="wrap" id="top">

  <section id="homeView" class="card hidden">
    <div class="big-logo">ES</div>
    <h1>ESPONT</h1>
    <p>Bienvenido. Usa el menú de la izquierda: Inicio · Calculadora · Productos · Seleccionados · Resumen.</p>
  </section>
  
  <section id="productosView" class="card hidden" style="min-height:50vh;">
    <div class="section-title">Mis productos</div>
    <div id="catalogoGrid" class="catalog-grid"></div>
  </section>



    <div class="grid">
      <!-- Left: Selección -->
      <section class="card">
        <h3>Categorías</h3>
        <div id="categorias" class="chips"></div>

        <button id="toggleEditor" type="button">▸ Modificar Precios</button>
        <div id="editorPreciosWrap" class="collapsed">
          <table id="editorTabla">
            <thead>
              <tr><th>Categoría</th><th>Producto</th><th>Precio (por m² / ml)</th></tr>
            </thead>
            <tbody id="editorBody"></tbody>
          </table>
          <div style="display:flex; gap:8px; align-items:center; justify-content:space-between; margin-top:8px;">
            <span class="muted" style="font-size:12px;">Se guarda automáticamente en este navegador (localStorage).</span>
            <button class="btn btn-ghost" id="btnReset">Restablecer valores por defecto</button>
          </div>
        </div>

        <div class="section-title" id="opcionesSec">Opciones</div>
        <div id="opcionesWrap"></div>

        <div class="section-title" id="seleccionSec">Seleccionados</div>
        <div id="seleccionados" class="badges"></div>
      </section>

      <!-- Right: Parámetros -->
      <aside class="card" id="paramSec">
        <h3>Parámetros y Servicios</h3>

        <label>Unidad</label>
        <select id="unidadMedida">
          <option value="m">Metros</option>
          <option value="cm">Centímetros</option>
          <option value="in">Pulgadas</option>
        </select>

        <label>Dimensiones</label>
        <div style="display:flex; gap:8px;">
          <input type="number" id="ancho" placeholder="0 (Ancho)" min="0" value="0">
          <input type="number" id="alto" placeholder="0 (Alto)" min="0" value="0">
        </div>

        <label>IVA (%)</label>
        <input type="number" id="ivaInput" min="0" max="100" value="15">

        <div class="section-title" style="margin-top:14px;">Servicios</div>
        <div class="card" style="background:#0f121a; border-color:#22293a; padding:12px;">
          <div style="display:grid; gap:10px;">
            <div>
              <div class="muted" style="font-weight:700;">Diseño</div>
              <div style="display:flex; gap:8px; margin-top:6px;">
                <input type="number" id="tiempoDiseno" min="0" step="0.1" value="0" placeholder="Horas">
                <input type="number" id="costoDiseno" min="0" value="10" placeholder="$ por hora">
              </div>
              <div class="muted" style="margin-top:6px;">Total: <b id="totalDiseno">$0.00</b></div>
            </div>

            <div>
              <div class="muted" style="font-weight:700;">Elaboración (Christian)</div>
              <div style="display:flex; gap:8px; margin-top:6px;">
                <input type="number" id="tiempoElaboracion" min="0" step="0.1" value="0" placeholder="Horas">
                <input type="number" id="costoElaboracion" min="0" value="10" placeholder="$ por hora">
              </div>
              <div class="muted" style="margin-top:6px;">Total: <b id="totalElaboracion">$0.00</b></div>
            </div>

            <div>
              <div class="muted" style="font-weight:700;">Corte láser</div>
              <div style="display:flex; gap:8px; margin-top:6px;">
                <input type="number" id="tiempoLaser" min="0" step="1" value="0" placeholder="Minutos">
                <input type="number" id="precioLaser" min="0" value="0.4" placeholder="$ por minuto">
              </div>
              <div class="muted" style="margin-top:6px;">Total: <b id="totalLaser">$0.00</b></div>
            </div>
          </div>
        
        <!-- Sección dinámica para Metálica (Metro lineal) -->
        <div id="metalicaBox" class="card" style="display:none; background:#0f121a; border-color:#224; margin-top:12px; padding:12px;">
          <div class="section-title">Metálica · Cálculo por metro lineal</div>
          <div class="muted" style="font-size:12px; margin-bottom:8px;">Calcula el total de la estructura por <b>metro lineal (ml)</b>. Puedes incluirlo al total general.</div>
          <div style="display:grid; gap:8px; grid-template-columns: 1fr 1fr;">
            <div>
              <label>Cant. de tramos</label>
              <input type="number" id="ml_tramos" min="1" step="1" value="0">
            </div>
            <div>
              <label>Largo por tramo (m)</label>
              <input type="number" id="ml_largo" min="0" step="0.01" value="0">
            </div>
            <div>
              <label>Precio por ml (sin IVA)</label>
              <input type="number" id="ml_precio" min="0" step="0.01" value="6">
            </div>
            <div style="display:flex; align-items:flex-end; gap:8px;">
              <input type="checkbox" id="ml_incluir" style="width:auto;">
              <label for="ml_incluir" style="margin:0;">Incluir en el total</label>
            </div>
          </div>
          <div class="row" style="margin-top:8px;">
            <span class="k">Metros lineales totales</span>
            <span class="v" id="ml_totales">1.00 ml</span>
          </div>
          <div class="row">
            <span class="k">Subtotal Metálica</span>
            <span class="v" id="ml_subtotal">$6.00</span>
          </div>
        </div>

        <label style="margin-top:12px;">Ganancia</label>
        <input type="range" id="gananciaSlider" min="0" max="100" value="0">
        <div id="gananciaText" class="muted">20%</div>
      </aside>
    </div>

    <!-- Sticky bottom summary -->
    <div class="bottom-bar" id="bottomSummary">
      <div class="sheet">
        <div class="row">
          <span class="k">Subtotal servicios</span>
          <span class="v" id="subtotalServicios">$0.00</span>
        </div>
        <div class="row">
          <span class="k">IVA</span>
          <span class="v" id="ivaResumen">$0.00</span>
        </div>
        <div class="row">
          <span class="k">Total</span>
          <span class="total" id="totalResumen">$0.00</span>
        </div>
        
        <div class="row" id="filaNombreCliente">
          <input type="text" id="fa_nombre" placeholder="Nombre (cliente o letrero)" />
        </div>
<div class="row">
          <button class="btn btn-ghost" id="btnRecalcular">Recalcular</button>
          <button class="btn btn-ghost" id="btnVenderTotal">Vender total</button>
          <button class="btn btn-primary" id="btnCopiar">Copiar total</button>
        </div>
      </div>
    </div>
  
    
    <!-- ===================== FACTURAS (vista) ===================== -->
    <section id="facturasView" class="card hidden" style="min-height:60vh;">
      <div class="section-title">Facturas</div>
      <div class="facturas-toolbar">
        <span class="badge" style="background:#ffffff12;border:1px solid #ffffff1f;">Total facturas: <b id="factCount" style="margin-left:6px">0</b></span>
        <span class="badge" style="background:#ffffff12;border:1px solid #ffffff1f;">Monto acumulado: <b id="factTotal" style="margin-left:6px">$0.00</b></span>
        <div style="margin-left:auto;display:flex;gap:8px;">
          <button class="btn-sm" id="btnExportCSV">Exportar CSV</button>
          <button class="btn-sm" id="btnBorrarFacturas">Borrar todo</button>
        </div>
      </div>

      
      <!-- ===== Factura Activa (líneas) ===== -->
      <div class="fa-card" id="facturaActivaCard">
        <div style="display:flex;align-items:center;gap:8px;justify-content:space-between">
          <div>
            <div class="section-title">Factura activa</div>
            <div class="badge-iva">IVA aplicado: 15%</div>
          </div>
          <div style="display:flex;gap:8px">
            <button class="btn-sm" id="fa_btn_nueva">Nueva factura</button>
            <button class="btn-sm primary" id="fa_btn_guardar">Guardar factura</button>
          </div>
        </div>
        <div style="overflow:auto">
          <table class="fa-table" id="fa_tabla">
            <thead>
              <tr>
                <th>#</th>
                <th>Descripción</th>
                <th>Unidad</th>
                <th>Cantidad</th>
                <th>P. Unitario</th>
                <th>Subtotal</th>
                <th>IVA 15%</th>
                <th>Total</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody id="fa_tbody"><tr><td colspan="9" class="muted">Sin líneas. Usa “Vender” en la Calculadora.</td></tr></tbody>
            <tfoot>
              <tr>
                <td colspan="5" class="t-right"><b>Subtotal general</b></td>
                <td id="fa_subtotal" class="t-right">$0.00</td>
                <td id="fa_iva" class="t-right">$0.00</td>
                <td id="fa_total" class="t-right">$0.00</td>
                <td></td>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
      <!-- === /Factura Activa (líneas) === -->
      <!-- ===== Historial de Facturas (sesión) ===== -->
      <div class="fa-card" id="fa_hist_card">
        <div style="display:flex;align-items:center;justify-content:space-between">
          <div class="section-title">Historial (sesión)</div>
          <div class="muted">Se guardan en tu navegador</div>
        </div>
        <div style="overflow:auto">
          <table class="fa-table fa-hist">
            <thead>
              <tr>
                <th>Fecha</th>
                <th>Items</th>
                <th>Subtotal</th>
                <th>IVA 15%</th>
                <th>Total</th>
                <th>Estado</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody id="fa_hist_tbody">
              <tr><td colspan="7" class="muted">Sin facturas. Usa “Vender total” en la Calculadora.</td></tr>
            </tbody>
          </table>
        </div>
      </div>
      <!-- === /Historial de Facturas (sesión) === -->


      <div class="facturas-layout">
        <button id="fabNuevaFactura" class="mobile-fab" aria-label="Nueva factura">＋ Nueva factura</button>
        <!-- Listado a la izquierda -->
        <div>
          <div class="fact-grid" id="facturasGrid"></div>
        </div>

        <!-- Formulario rápido a la derecha -->
        <aside class="invoice-card" id="invoiceQuick">
          <div class="drag-handle"></div>
          <div style="display:flex;align-items:center;gap:8px;justify-content:space-between;margin-top:4px;">
            <h4 style="margin:0">Nueva factura rápida</h4>
            <button class="btn-sm" id="sheetClose" type="button">Cerrar</button>
          </div>
          <h4>Nueva factura rápida</h4>
          <div class="invoice-row">
            <select id="f_producto"></select>
          </div>
          <div class="invoice-row">
            <input type="number" id="f_precio" placeholder="Precio" min="0" step="0.01">
          </div>
          <div class="invoice-row">
            <input type="number" id="f_cantidad" placeholder="Cantidad" min="1" step="1" value="1">
          </div>
          <div class="invoice-row">
            <textarea id="f_notas" rows="2" placeholder="Notas (opcional)" style="resize:vertical"></textarea>
          </div>
          <div class="invoice-small">IVA actual: <b id="f_iva_txt">12%</b></div>
          <div class="invoice-total">
            <span>Prevista:</span>
            <span class="num" id="f_total_mostrado">$0.00</span>
          </div>
          <div class="invoice-row" style="justify-content:space-between">
            <button class="btn btn-ghost" id="f_btn_calc">Tomar total de Calculadora</button>
            <button class="btn btn-primary" id="f_btn_crear">Crear factura</button>
          </div>
          <div class="invoice-small" style="margin-top:8px;">Sugerencia: también puedes vender el <b>total actual</b> desde el botón “Vender total” en el resumen.</div>
        </aside>
      </div>
    </section>
    <!-- =================== /FACTURAS (vista) =================== -->
    
</main>

  <script>
  
  // --- Menú lateral derecho ---
  function buildSideMenu(){
    const list = document.getElementById('sideMenuList');
    if(!list) return;
    list.innerHTML = '';
    Object.keys(opciones).sort((a,b)=>a.localeCompare(b,'es',{sensitivity:'base'})).forEach(cat => {
      const btn = document.createElement('button');
      btn.className = 'item';
      btn.dataset.cat = cat;
      if(cat==='Metálica'){ btn.classList.add('metalica'); }
      btn.innerHTML = `
        <span class="icon">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
            <rect x="5" y="5" width="14" height="14" rx="3" stroke="currentColor" stroke-width="1.4"/>
            <path d="M9 12h6M12 9v6" stroke="currentColor" stroke-width="1.4" stroke-linecap="round"/>
          </svg>
        </span>
        <span class="label">${cat}</span>`;
      btn.addEventListener('click',()=>{
        // Toggle corresponding hidden chip
        const chips = Array.from(document.querySelectorAll('#categorias .chip'));
        const chip = chips.find(c => c.textContent.trim() === cat);
        if(chip){ chip.click(); } else { // Fallback: direct
          const wrap = document.getElementById('categorias');
          if(wrap){
            // ensure chips rendered
            renderCategorias();
            const chip2 = Array.from(document.querySelectorAll('#categorias .chip')).find(c => c.textContent.trim() === cat);
            if(chip2) chip2.click();
          }
        }
        refreshSideMenuActive();
      });
      list.appendChild(btn);
    });
    refreshSideMenuActive();
  }
  function refreshSideMenuActive(){
    const actives = activeCategories();
    document.querySelectorAll('#sideMenuList .item').forEach(it => {
      if(actives.includes(it.dataset.cat)) it.classList.add('active'); else it.classList.remove('active');
    });
  }

  
  // --- Left rail behavior ---
  function initLeftRail(){
    const items = Array.from(document.querySelectorAll('.left-rail .rail-item'));
    function goTo(sel){
      const el = document.querySelector(sel);
      if(!el) return;
      const y = el.getBoundingClientRect().top + window.scrollY - 72;
      window.scrollTo({top:y, behavior:'smooth'});
    }
    items.forEach(it => it.addEventListener('click', ()=> goTo(it.dataset.target)));

    // Active by scroll
    const observerTargets = ['#opcionesSec','#paramSec','#seleccionSec','#bottomSummary','#top']
      .map(sel => document.querySelector(sel)).filter(Boolean);
    let currentView = null;
    const obs = new IntersectionObserver((entries)=>{
      // elegir la sección más cercana a la parte superior
      let best = null; let bestDist = Infinity;
      observerTargets.forEach(t=>{
        const r = t.getBoundingClientRect();
        const dist = Math.abs(r.top - 90); // 90px bajo la appbar
        if(r.bottom > 100 && r.top < window.innerHeight && dist < bestDist){
          bestDist = dist; best = t;
        }
      });
      if(best){
        const id = '#'+best.id;
        items.forEach(i => {
          if(!i.dataset.view){
            i.classList.toggle('active', i.dataset.target===id);
          }
        });
      }
    }, {rootMargin: "-20% 0px -60% 0px", threshold: 0.2});
    observerTargets.forEach(t=>obs.observe(t));
  }

  // === Datos base ===
  const opciones = {
  "Acrílico": {
    "3 líneas": 18.78,
    "2 líneas": 13.32
  },
  "Caucho": {
    "Delgado": 10.25,
    "Grueso": 17.08
  },
  "Vinil": {
    "Metro cuadrado": 5
  },
  "Laminado": {
    "Mate (m²)": 3,
    "Brillo (m²)": 5
  },
  "Cintra": {
    "Plancha Cintra 3": 4.10,
    "Plancha Cintra 6": 7.00
  },
  "Metálica": {
    "El Metro Lineal": 6
  },
  "Perfin": {
    "Metro": 2.5
  },
  "MDF": {
    "MDF 3 líneas": 3.33
  },
  "Lona": {
    "Metro cuadrado": 8.5,
    "Cuadro": 0
  },
  "Aluko bond": {
    "Plancha ACP": 10.25
  },
  "Cartón": {
    "Plancha 1.5×2.6": 2.05
  },
  "Iluminación": {
    "Foco tubular": 2.00
  }
};

  // === Persistencia de precios ===
  const STORAGE_PRECIOS = 'calc_opciones_precios_v1';
  function cargarPreciosGuardados(){
    try{
      const raw = localStorage.getItem(STORAGE_PRECIOS);
      if(!raw) return;
      const guardado = JSON.parse(raw);
      if(typeof guardado === 'object' && guardado){
        for(const cat in guardado){
          if(!opciones[cat]) opciones[cat] = {};
          for(const prod in guardado[cat]){
            const val = parseFloat(guardado[cat][prod]);
            if(!isNaN(val)) opciones[cat][prod] = val;
          }
        }
      }
    }catch(e){ console.warn('No se pudo cargar precios guardados', e); }
  }
  function restablecerPrecios(){
    if(!confirm('¿Restablecer los precios a los valores por defecto?')) return;
    localStorage.removeItem(STORAGE_PRECIOS);
    location.reload();
  }
  function guardarPreciosAuto(){
    try{
      localStorage.setItem(STORAGE_PRECIOS, JSON.stringify(opciones));
    }catch(e){ console.warn('No se pudo guardar precios:', e); }
  }

  // === Estados ===
  const COLORS = ['#2e7d32','#1976d2','#ef6c00','#6a1b9a','#00897b','#c2185b','#5d4037','#455a64','#9e9d24','#8e24aa'];
  let seleccion = []; // [{cat, opt, price, color}]
  const STORAGE_SEL = 'calc_multi_sel_v1';

  function guardarSeleccion() {
    localStorage.setItem(STORAGE_SEL, JSON.stringify(seleccion));
  }
  function cargarSeleccion() {
    try{
      const raw = localStorage.getItem(STORAGE_SEL);
      if (!raw) return;
      const arr = JSON.parse(raw);
      if (Array.isArray(arr)) {
        seleccion = arr.filter(x => x && x.cat!=='Metálica' && opciones[x.cat] && opciones[x.cat][x.opt] !== undefined)
                     .map((x,i) => ({...x, color: COLORS[i % COLORS.length]}));
      }
    }catch(e){ console.warn(e); }
  }

  // === UI Render ===
  function renderCategorias() {
    const wrap = document.getElementById('categorias');
    wrap.innerHTML = '';
    Object.keys(opciones).forEach((cat, idx) => {
      const btn = document.createElement('button');
      btn.className = 'chip';
      btn.textContent = cat;
      btn.onclick = () => toggleCategoria(cat, btn);
      wrap.appendChild(btn);
    });
    try{ buildSideMenu(); }catch(e){}
  }

  function activeCategories(){
    return [...document.querySelectorAll('.chip.active')].map(b => b.textContent);
  }

  function toggleCategoria(cat, el){
    el.classList.toggle('active');
    renderOpciones();
    mostrarOcultarMetalica();
  }

  function renderOpciones() {
    const wrap = document.getElementById('opcionesWrap');
    wrap.innerHTML = '';
    const actives = activeCategories();
    if (!actives.length){ return; }

    actives.forEach(cat => {
      if(cat==='Metálica'){ /* oculto en OPCIONES, solo panel */ return; }
      const box = document.createElement('div');
      box.className = 'card'; box.style.background = '#111521'; box.style.borderColor = '#22293a';
      const title = document.createElement('div');
      title.className = 'section-title';
      title.textContent = cat;
      box.appendChild(title);

      Object.keys(opciones[cat]).forEach(opt => {
        const id = 'chk_' + btoa(cat + '|' + opt).replace(/=/g,'');
        const row = document.createElement('label');
        row.className = 'option-check';
        row.htmlFor = id;

        const input = document.createElement('input');
        input.type = 'checkbox'; input.id = id; input.dataset.cat = cat; input.dataset.opt = opt;
        input.checked = !!seleccion.find(x => x.cat===cat && x.opt===opt);
        input.onchange = onToggleProducto;

        const dot = document.createElement('span');
        dot.className = 'color-dot';
        dot.style.background = colorFor(cat,opt);

        const txt = document.createElement('span');
        txt.textContent = opt + ' — $' + opciones[cat][opt];

        row.appendChild(input); row.appendChild(dot); row.appendChild(txt);
        box.appendChild(row);
      });

      wrap.appendChild(box);
    });

    renderSeleccionados();
    mostrarOcultarMetalica();
    // Recalcular en caliente para actualizar resumen
    calcularPrecio();
    mostrarOcultarMetalica();
  }

  function colorFor(cat,opt){
    const idx = seleccion.findIndex(x => x.cat===cat && x.opt===opt);
    if (idx >= 0) return seleccion[idx].color;
    const used = new Set(seleccion.map(x => x.color));
    for (let c of COLORS){ if (!used.has(c)) return c; }
    return COLORS[seleccion.length % COLORS.length];
  }

  function onToggleProducto(e){
    const cat = e.target.dataset.cat;
    const opt = e.target.dataset.opt;
    if (e.target.checked){
      const price = opciones[cat][opt];
      const color = colorFor(cat,opt);
      if (!seleccion.find(x => x.cat===cat && x.opt===opt)){
        seleccion.push({cat, opt, price, color});
      }
    } else {
      seleccion = seleccion.filter(x => !(x.cat===cat && x.opt===opt));
    }
    guardarSeleccion();
    renderSeleccionados();
    calcularPrecio();
    mostrarOcultarMetalica();
  }

  function renderSeleccionados(){
    const wrap = document.getElementById('seleccionados');
    wrap.innerHTML = '';
    seleccion.forEach((item, i) => {
      const b = document.createElement('div');
      b.className = 'badge';
      const dot = document.createElement('span'); dot.className='color-dot'; dot.style.background=item.color;
      b.appendChild(dot);
      const txt = document.createElement('span'); txt.textContent = item.cat + ' · ' + item.opt + ' ($' + item.price + ')';
      b.appendChild(txt);
      const x = document.createElement('span'); x.className='x'; x.textContent='×';
      x.onclick = () => {
        const id = 'chk_' + btoa(item.cat + '|' + item.opt).replace(/=/g,'');
        const cb = document.getElementById(id);
        if (cb){ cb.checked = false; }
        seleccion.splice(i,1);
        guardarSeleccion();
        renderOpciones();
        renderSeleccionados();
        calcularPrecio();
      };
      b.appendChild(x);
      wrap.appendChild(b);
    });
  }

  // === Cálculo ===
  function updateGananciaText() {
    const ganancia = document.getElementById('gananciaSlider').value;
    document.getElementById('gananciaText').innerText = ganancia + "%";
  }
  function convertirAMetros(valor, unidad) {
    if (unidad === "cm") return valor / 100;
    if (unidad === "in") return valor * 0.0254;
    return valor;
  }

  function calcularPrecio() {
    const mlDatos = calcularMetalica ? calcularMetalica() : {ml:0, sub:0, incluir:false};
    const anchoInput = parseFloat(document.getElementById('ancho').value||'0');
    const altoInput = parseFloat(document.getElementById('alto').value||'0');
    const unidad = document.getElementById('unidadMedida').value;
    const ganancia = parseFloat(document.getElementById('gananciaSlider').value||'0') / 100;

    const ancho = convertirAMetros(anchoInput, unidad);
    const alto  = convertirAMetros(altoInput, unidad);
    const area  = ancho * alto;
    // Fallback de área para evitar totales en 0 cuando no hay medidas
    const __area = (area && area > 0) ? area : 0;

    let subtotalMateriales = seleccion.reduce((acc,it)=> {
      const p = (opciones[it.cat] && opciones[it.cat][it.opt] !== undefined) ? opciones[it.cat][it.opt] : it.price;
      return acc + (p * __area);
    }, 0);

    const subtotalDiseno = (parseFloat(document.getElementById('tiempoDiseno').value||'0') * parseFloat(document.getElementById('costoDiseno').value||'0'));
    const subtotalElaboracion = (parseFloat(document.getElementById('tiempoElaboracion').value||'0') * parseFloat(document.getElementById('costoElaboracion').value||'0'));
    const subtotalLaser = (parseFloat(document.getElementById('tiempoLaser').value||'0') * parseFloat(document.getElementById('precioLaser').value||'0'));

    let subtotal = subtotalMateriales + subtotalDiseno + subtotalElaboracion + subtotalLaser + ((typeof metalicaVisible==='function' && metalicaVisible() && mlDatos.incluir) ? mlDatos.sub : 0);

    
    // Si no hay materiales seleccionados, ni metálica incluida, ni servicios > 0, forzar subtotal 0
    const anyServicios = (subtotalDiseno + subtotalElaboracion + subtotalLaser) > 0;
    const anyMateriales = (Array.isArray(seleccion) && seleccion.length > 0 && __area > 0);
    const anyMetalica  = (mlDatos && mlDatos.incluir && mlDatos.sub > 0);
    if(!anyServicios && !anyMateriales && !anyMetalica){
      subtotal = 0;
    }
    document.getElementById('totalDiseno').innerText = "$" + subtotalDiseno.toFixed(2);
    document.getElementById('totalElaboracion').innerText = "$" + subtotalElaboracion.toFixed(2);
    document.getElementById('totalLaser').innerText = "$" + subtotalLaser.toFixed(2);

    let total = subtotal + (subtotal * ganancia);
    const ivaPorcentaje = parseFloat(document.getElementById('ivaInput').value||'0') / 100;
    const iva = total * ivaPorcentaje;

    // Bottom summary
    document.getElementById('subtotalServicios').innerText = "$" + subtotal.toFixed(2);
    document.getElementById('ivaResumen').innerText = "$" + iva.toFixed(2);
    document.getElementById('totalResumen').innerText = "$" + (total + iva).toFixed(2);
  }

  // === Editor ===
  function toggleEditor(){
    const box = document.getElementById('editorPreciosWrap');
    const wasCollapsed = box.classList.contains('collapsed');
    box.classList.toggle('collapsed');
    if (wasCollapsed) buildEditorTabla();
  }
  function buildEditorTabla(){
    const body = document.getElementById('editorBody');
    if(!body) return;
    body.innerHTML = '';
    Object.keys(opciones).forEach(cat => {
      const prods = Object.keys(opciones[cat]);
      prods.forEach((prod, idx) => {
        const tr = document.createElement('tr');
        const tdCat = document.createElement('td'); tdCat.textContent = (idx===0 ? cat : ''); tdCat.style.fontWeight = (idx===0 ? 'bold' : 'normal');
        const tdProd = document.createElement('td'); tdProd.textContent = prod;
        const tdPrecio = document.createElement('td');
        const input = document.createElement('input'); input.type='number'; input.min='0'; input.step='0.0001'; input.value = opciones[cat][prod];
        input.oninput = function(){
          const v = parseFloat(this.value || '0');
          opciones[cat][prod] = isNaN(v) ? 0 : v;
          guardarPreciosAuto();
          syncSeleccionConPreciosActuales();
          renderOpciones();
          renderSeleccionados();
          calcularPrecio();
        };
        tdPrecio.appendChild(input);
        tr.appendChild(tdCat); tr.appendChild(tdProd); tr.appendChild(tdPrecio);
        body.appendChild(tr);
      });
    });
  }
  function syncSeleccionConPreciosActuales(){
    seleccion = seleccion.map(item => {
      const nuevo = (opciones[item.cat] && opciones[item.cat][item.opt] !== undefined) ? opciones[item.cat][item.opt] : item.price;
      return {...item, price: nuevo};
    });
    guardarSeleccion();
  }

  // === Eventos globales ===
  function bindLiveInputs(){
    const ids = ['unidadMedida','ancho','alto','ivaInput','tiempoDiseno','costoDiseno','tiempoElaboracion','costoElaboracion','tiempoLaser','precioLaser','gananciaSlider', 'ml_tramos','ml_largo','ml_precio','ml_incluir'];
    ids.forEach(id => {
      const el = document.getElementById(id);
      if(!el) return;
      const ev = (el.type === 'range' || el.tagName === 'SELECT') ? 'input' : 'input';
      el.addEventListener(ev, ()=>{
        if(id==='gananciaSlider') updateGananciaText();
        if(id==='ml_precio'){ try{ opciones['Metálica']['El Metro Lineal'] = parseFloat(el.value||'0')||0; guardarPreciosAuto(); }catch(e){} }
        calcularMetalica();
        calcularPrecio();
        saveUIState();
      });
    });
  }

  function copiarTotal(){
    const total = document.getElementById('totalResumen').innerText || '';
    saveUIState();
    navigator.clipboard.writeText(total).then(()=>{
      const btn = document.getElementById('btnCopiar');
      const prev = btn.textContent;
      btn.textContent = '¡Copiado!';
      setTimeout(()=> btn.textContent = prev, 1200);
    });
  }


  // === Metálica (ml) ===
  function metalicaVisible(){ const act = activeCategories(); return act.includes('Metálica'); }
  function syncMetalicaPrecioDesdeOpciones(){
    try{
      const p = opciones['Metálica'] && opciones['Metálica']['El Metro Lineal'];
      if(typeof p === 'number'){
        const el = document.getElementById('ml_precio');
        if(el){ el.value = p; }
      }
    }catch(e){}
  }
  function mostrarOcultarMetalica(){
    const box = document.getElementById('metalicaBox');
    if(!box) return;
    if(metalicaVisible()){
      box.classList.add('is-active');
box.style.display = '';
      syncMetalicaPrecioDesdeOpciones();
      calcularMetalica();
    } else {
      box.style.display = 'none';
    }
  }
  function calcularMetalica(){
    const tramos = parseFloat(document.getElementById('ml_tramos')?.value || '0');
    const largo  = parseFloat(document.getElementById('ml_largo')?.value || '0');
    const precio = parseFloat(document.getElementById('ml_precio')?.value || '0');
    const ml = Math.max(0, (isNaN(tramos)?0:tramos) * (isNaN(largo)?0:largo));
    const sub = ml * (isNaN(precio)?0:precio);
    const totSpan = document.getElementById('ml_totales');
    const subSpan = document.getElementById('ml_subtotal');
    if(totSpan) totSpan.textContent = ml.toFixed(2) + ' ml';
    if(subSpan) subSpan.textContent = '$' + sub.toFixed(2);
    
    // Auto incluir en total si hay ml > 0; auto excluir si ml == 0
    const inclEl = document.getElementById('ml_incluir');
    let include = !!inclEl?.checked;
    if (ml > 0 && !include) { include = true; if(inclEl){ inclEl.checked = true; } }
    if (ml <= 0 && include) { include = false; if(inclEl){ inclEl.checked = false; } }
    const box2 = document.getElementById('metalicaBox');
    if(box2){ box2.classList.toggle('included', include); }
const box = document.getElementById('metalicaBox'); if(box){ box.classList.toggle('included', !!document.getElementById('ml_incluir')?.checked); }
    return {ml, sub, incluir: !!document.getElementById('ml_incluir')?.checked};
  }


  // Init
  window.addEventListener('load', ()=>{
  try{ loadCatalog(); loadFacturas(); }catch(e){}
  try{ fillFacturaFormProducts(); bindFacturaForm(); syncFormFromSelect(); }catch(e){}
    initLeftRail();
    buildSideMenu();
    setTimeout(refreshSideMenuActive, 0);
    cargarPreciosGuardados();
    cargarSeleccion();
    renderCategorias();
    loadUIState();
    renderOpciones();
    bindLiveInputs();
    mostrarOcultarMetalica();
    calcularMetalica();
    updateGananciaText();
    calcularPrecio();

    document.getElementById('toggleEditor').addEventListener('click', toggleEditor);
    document.getElementById('btnReset').addEventListener('click', ()=>{ restablecerPrecios(); saveUIState(); });
    document.getElementById('btnRecalcular').addEventListener('click', calcularPrecio);
    document.getElementById('btnCopiar').addEventListener('click', copiarTotal);
  });
  


// === Persistencia de UI (dimensiones, IVA, ganancia, servicios, metálica) ===
const STORAGE_UI = 'calc_ui_state_v1';

function __readVal(id, isBool=false){
  const el = document.getElementById(id);
  if(!el) return isBool ? false : 0;
  if(isBool) return !!el.checked;
  const v = parseFloat(el.value);
  return isNaN(v) ? (el.value || 0) : v;
}
function __writeVal(id, val, isBool=false){
  const el = document.getElementById(id);
  if(!el) return;
  if(isBool){ el.checked = !!val; return; }
  if(typeof val === 'string'){ el.value = val; }
  else { el.value = (val===null||val===undefined)?0:val; }
}

function saveUIState(){
  try{
    const state = {
      unidad: (document.getElementById('unidadMedida')||{}).value || 'Metros',
      ancho: __readVal('ancho'),
      alto: __readVal('alto'),
      iva: __readVal('ivaInput'),
      ganancia: __readVal('gananciaSlider'),
      servicios: {
        tDiseno: __readVal('tiempoDiseno'),
        cDiseno: __readVal('costoDiseno'),
        tElab: __readVal('tiempoElaboracion'),
        cElab: __readVal('costoElaboracion'),
        tLaser: __readVal('tiempoLaser'),
        pLaser: __readVal('precioLaser'),
      },
      metalica: {
        incluir: __readVal('ml_incluir', true),
        tramos: __readVal('ml_tramos'),
        largo: __readVal('ml_largo'),
        precio: __readVal('ml_precio')
      },
      seleccion: (Array.isArray(seleccion) ? seleccion.map(s=>({cat:s.cat,opt:s.opt,price:s.price})) : [])
    ,
      nombre: (document.getElementById('fa_nombre')||{}).value || ''
    };
    localStorage.setItem(STORAGE_UI, JSON.stringify(state));
  }catch(e){ console.warn('No se pudo guardar UI:', e); }
}

function loadUIState(){
  try{
    const raw = localStorage.getItem(STORAGE_UI);
    if(!raw) return;
    const state = JSON.parse(raw);
    if(!state || typeof state !== 'object') return;
    if(state.unidad) __writeVal('unidadMedida', state.unidad);
    if(state.ancho!==undefined) __writeVal('ancho', state.ancho);
    if(state.alto!==undefined) __writeVal('alto', state.alto);
    if(state.iva!==undefined) __writeVal('ivaInput', state.iva);
    if(state.ganancia!==undefined) __writeVal('gananciaSlider', state.ganancia);
    if(state.servicios){
      __writeVal('tiempoDiseno', state.servicios.tDiseno);
      __writeVal('costoDiseno', state.servicios.cDiseno);
      __writeVal('tiempoElaboracion', state.servicios.tElab);
      __writeVal('costoElaboracion', state.servicios.cElab);
      __writeVal('tiempoLaser', state.servicios.tLaser);
      __writeVal('precioLaser', state.servicios.pLaser);
    }
    if(state.metalica){
      __writeVal('ml_incluir', state.metalica.incluir, true);
      __writeVal('ml_tramos', state.metalica.tramos);
      __writeVal('ml_largo', state.metalica.largo);
      __writeVal('ml_precio', state.metalica.precio);
    }
    if(state.seleccion && Array.isArray(state.seleccion) && state.seleccion.length){
      try{
        const base = new Map(seleccion.map(x=>[x.cat+'|'+x.opt, x]));
        state.seleccion.forEach(x=>{
          const key = x.cat+'|'+x.opt;
          if(!base.has(key)){
            const p = (opciones[x.cat] && opciones[x.cat][x.opt] !== undefined) ? opciones[x.cat][x.opt] : (x.price||0);
            seleccion.push({cat:x.cat, opt:x.opt, price:p, color: COLORS[seleccion.length % COLORS.length]});
          }
        });
      }catch(e){}
      guardarSeleccion();
      renderSeleccionados();
    }
  }catch(e){ console.warn('No se pudo cargar UI:', e); }
}
// === Catálogo con precios/stock e integración de ventas a Facturas ===
const STORAGE_CATALOGO = 'calc_catalogo_v1';
const STORAGE_FACTURAS = 'calc_facturas_v1';
let catalogoData = null;
let facturas = [];

function defaultCatalog(){
  return [
    {id:'tazas', nombre:'Tazas', precio:5.00, stock:0},
    {id:'vanner', nombre:'Vanner', precio:12.00, stock:0},
    {id:'camisetas', nombre:'Camisetas', precio:10.00, stock:0},
    {id:'polos', nombre:'Polos', precio:9.00, stock:0},
    {id:'gorras', nombre:'Gorras', precio:8.00, stock:0},
  ];
}
function loadCatalog(){
  try{ const raw = localStorage.getItem(STORAGE_CATALOGO); if(raw){ catalogoData = JSON.parse(raw);} }catch(e){}
  if(!Array.isArray(catalogoData)) catalogoData = defaultCatalog();
}
function saveCatalog(){ try{ localStorage.setItem(STORAGE_CATALOGO, JSON.stringify(catalogoData)); }catch(e){} }
function loadFacturas(){
  try{ const raw = localStorage.getItem(STORAGE_FACTURAS); if(raw){ facturas = JSON.parse(raw);} }catch(e){}
  if(!Array.isArray(facturas)) facturas = [];
}
function saveFacturas(){ try{ localStorage.setItem(STORAGE_FACTURAS, JSON.stringify(facturas)); }catch(e){} }
function genId(){ return 'F' + Date.now().toString(36) + Math.floor(Math.random()*999).toString(36).padStart(2,'0'); }
function ivaPercent(){ const v = parseFloat(document.getElementById('ivaInput')?.value || '0'); return isNaN(v)?0:v; }


function refreshIVABadge(){
  const b = document.querySelector('.badge-iva');
  if(b){ try{ b.textContent = `IVA aplicado: ${IVA_EC()}%`; }catch(e){} }
}
document.getElementById('ivaInput')?.addEventListener('input', refreshIVABadge);
window.addEventListener('load', refreshIVABadge);
function showToast(msg){
  const t = document.getElementById('toast'); if(!t) return;
  t.textContent = msg; t.style.display = 'block';
  requestAnimationFrame(()=> t.classList.add('show'));
  setTimeout(()=>{ t.classList.remove('show'); setTimeout(()=> t.style.display='none', 250); }, 1400);
}
function addFactura({producto, precio, cantidad, notas}){
  if(!Array.isArray(facturas)) { try{ loadFacturas(); }catch(e){} if(!Array.isArray(facturas)) facturas = []; }
  const sub = precio * cantidad;
  const iva = sub * (ivaPercent()/100);
  const total = sub + iva;
  const f = {
    id: genId(),
    fecha: new Date().toISOString(),
    producto, precio, cantidad, subtotal: sub, iva, total,
    estado: 'Pendiente',
    notas: notas||''
  };
  facturas.unshift(f);
  saveFacturas();
  renderFacturas();
  showToast('Factura creada');
  try{
    const btn = document.getElementById('btnVenderTotal');
    if(btn){ const prev = btn.textContent; btn.textContent = 'Agregado a Facturas'; setTimeout(()=>btn.textContent = prev, 1200); }
  }catch(e){}
}

function renderCatalog(){
  const grid = document.getElementById('catalogoGrid');
  if(!grid) return;
  grid.innerHTML = '';
  catalogoData.forEach(item=>{
    const card = document.createElement('div');
    card.className = 'catalog-card';
    card.innerHTML = `
      <div class="catalog-head">
        <div>
          <div class="catalog-title">${item.nombre}</div>
          <div class="stock">Stock: <b>${item.stock}</b></div>
        </div>
        <div class="price">$${item.precio.toFixed(2)}</div>
      </div>
      <div class="catalog-actions">
        <button class="btn-sm" data-action="menos">-1</button>
        <button class="btn-sm" data-action="mas">+1</button>
        <button class="btn-sm primary" data-action="vender">Vender</button>
        <span class="badge-muted">ID: ${item.id}</span>
        <button class="btn-sm" data-action="editar">Editar</button>
      </div>
      <div class="editor-box" style="display:none">
        <div class="editor-row" style="margin-bottom:8px;">
          <input type="number" step="0.01" min="0" value="${item.precio}" data-field="precio" placeholder="Precio">
          <input type="number" step="1" min="0" value="${item.stock}" data-field="stock" placeholder="Stock">
        </div>
        <div style="display:flex;gap:8px;">
          <button class="btn-sm primary" data-action="guardar">Guardar</button>
          <button class="btn-sm" data-action="cancelar">Cerrar</button>
          <button class="btn-sm" data-action="reset">Valores por defecto</button>
        </div>
      </div>
    `;
    card.querySelector('[data-action="editar"]').addEventListener('click',()=>{
      const box = card.querySelector('.editor-box'); box.style.display = box.style.display==='none'?'block':'none';
    });
    card.querySelector('[data-action="cancelar"]').addEventListener('click',()=>{
      card.querySelector('.editor-box').style.display='none';
    });
    card.querySelector('[data-action="guardar"]').addEventListener('click',()=>{
      const p = parseFloat(card.querySelector('input[data-field="precio"]').value||'0');
      const s = parseInt(card.querySelector('input[data-field="stock"]').value||'0',10);
      item.precio = isNaN(p)?0:p;
      item.stock = isNaN(s)?0:s;
      saveCatalog();
      renderCatalog();
    });
    card.querySelector('[data-action="mas"]').addEventListener('click',()=>{ item.stock += 1; saveCatalog(); renderCatalog(); });
    card.querySelector('[data-action="menos"]').addEventListener('click',()=>{ item.stock = Math.max(0, item.stock-1); saveCatalog(); renderCatalog(); });
    card.querySelector('[data-action="reset"]').addEventListener('click',()=>{
      const defaults = defaultCatalog().find(d=>d.id===item.id);
      if(defaults){ item.precio = defaults.precio; item.stock = defaults.stock; }
      saveCatalog(); renderCatalog();
    });
    card.querySelector('[data-action="vender"]').addEventListener('click',()=>{
      const max = item.stock;
      let qtyStr = prompt(`Cantidad a vender de "${item.nombre}" (Stock: ${max})`, '1');
      if(qtyStr===null) return;
      let qty = parseInt(qtyStr,10); if(isNaN(qty) || qty<=0) { alert('Cantidad inválida'); return; }
      if(qty > max){ if(!confirm(`No hay stock suficiente. ¿Vender de todas formas (${qty})?`)) return; }
      item.stock = Math.max(0, item.stock - qty);
      saveCatalog(); renderCatalog();
      addFactura({producto:item.nombre, precio:item.precio, cantidad:qty, notas:'Venta desde Catálogo'});
      setView('facturas');
    });
    grid.appendChild(card);
  });
}

function renderFacturas(){
  const grid = document.getElementById('facturasGrid'); if(!grid) return;
  grid.innerHTML = '';
  let total = 0;
  facturas.forEach(f=>{
    total += (typeof f.total==='number')?f.total:0;
    const card = document.createElement('div');
    card.className = 'fact-card';
    const fecha = new Date(f.fecha);
    card.innerHTML = `
      <div class="fact-row">
        <div class="fact-id">${f.id} · ${fecha.toLocaleString()}</div>
        <div class="fact-total">$${(f.total||0).toFixed(2)}</div>
      </div>
      <div class="fact-row"><span class="k">Producto</span><span class="v">${f.producto}</span></div>
      <div class="fact-row"><span class="k">Precio</span><span class="v">$${(f.precio||0).toFixed(2)}</span></div>
      <div class="fact-row"><span class="k">Cantidad</span><span class="v">${f.cantidad}</span></div>
      <div class="fact-row"><span class="k">Subtotal</span><span class="v">$${(f.subtotal||0).toFixed(2)}</span></div>
      <div class="fact-row"><span class="k">IVA (${ivaPercent()}%)</span><span class="v">$${(f.iva||0).toFixed(2)}</span></div>
      <div class="fact-row">
        <span class="fact-status">${f.estado}</span>
        <div style="display:flex;gap:8px;">
          <button class="btn-sm" data-action="pagar">Marcar pagada</button>
          <button class="btn-sm" data-action="eliminar">Eliminar</button>
        </div>
      </div>
      ${f.notas ? `<div class="muted" style="font-size:12px;">${f.notas}</div>` : ''}
    `;
    card.querySelector('[data-action="pagar"]').addEventListener('click',()=>{
      f.estado = 'Pagada'; saveFacturas(); renderFacturas();
    });
    card.querySelector('[data-action="eliminar"]').addEventListener('click',()=>{
      if(confirm('Eliminar esta factura?')){
        facturas = facturas.filter(x=>x.id!==f.id);
        saveFacturas(); renderFacturas();
      }
    });
    grid.appendChild(card);
  });
  const fc = document.getElementById('factCount'); if(fc) fc.textContent = String(facturas.length);
  const ft = document.getElementById('factTotal'); if(ft) ft.textContent = '$' + total.toFixed(2);
}

function exportCSV(){
  const rows = [['ID','Fecha','Producto','Precio','Cantidad','Subtotal','IVA','Total','Estado','Notas']];
  facturas.forEach(f=>rows.push([f.id,f.fecha,f.producto,f.precio,f.cantidad,f.subtotal,f.iva,f.total,f.estado,f.notas||'']));
  const csv = rows.map(r=>r.map(v=>`"${String(v).replace('"','""')}"`).join(',')).join('\\n');
  const blob = new Blob([csv], {type:'text/csv'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url; a.download = 'facturas.csv'; a.click();
  URL.revokeObjectURL(url);
}

window.addEventListener('load', ()=>{
  try{ loadCatalog(); loadFacturas(); }catch(e){}
  try{ fillFacturaFormProducts(); bindFacturaForm(); syncFormFromSelect(); }catch(e){}
  const exp = document.getElementById('btnExportCSV'); if(exp) exp.addEventListener('click', exportCSV);
  const del = document.getElementById('btnBorrarFacturas'); if(del) del.addEventListener('click', ()=>{
    if(confirm('¿Borrar todas las facturas?')){ facturas=[]; saveFacturas(); renderFacturas(); }
  });
  /* Deshabilitado: flujo antiguo de Vender total (usa historial) */
/* const venderTotalBtn = document.getElementById('btnVenderTotal'); if(venderTotalBtn){ venderTotalBtn.addEventListener('click', ()=>{ return; }); } */
});


// === Factura rápida (lado derecho en Facturas) ===
function fillFacturaFormProducts(){
  try{ loadCatalog(); }catch(e){}
  const sel = document.getElementById('f_producto'); if(!sel) return;
  // Clear and add calculadora
  sel.innerHTML = `<option value="calc">Servicio calculadora (total actual)</option>`;
  if(Array.isArray(catalogoData)){
    catalogoData.forEach(it=>{
      const opt = document.createElement('option');
      opt.value = it.id; opt.textContent = it.nombre;
      opt.dataset.precio = it.precio;
      sel.appendChild(opt);
    });
  }
}
function calcTotalPreview(){
  const p = parseFloat(document.getElementById('f_precio')?.value||'0')||0;
  const q = parseInt(document.getElementById('f_cantidad')?.value||'0',10)||0;
  const sub = p*q;
  const ivaPct = ivaPercent(); const ivaVal = sub*(ivaPct/100);
  const total = sub+ivaVal;
  const ivaTxt = document.getElementById('f_iva_txt'); if(ivaTxt) ivaTxt.textContent = ivaPct + '%';
  const totalEl = document.getElementById('f_total_mostrado'); if(totalEl) totalEl.textContent = '$' + total.toFixed(2);
}
function syncFormFromSelect(){
  const sel = document.getElementById('f_producto'); if(!sel) return;
  const val = sel.value;
  if(val==='calc'){
    // Read total from calculadora
    const totalTxt = (document.getElementById('totalResumen')?.innerText || '0').replace(/[^0-9.]/g,'');
    const totalNum = parseFloat(totalTxt)||0;
    document.getElementById('f_precio').value = totalNum; document.getElementById('f_cantidad').value = 1;
  }else{
    const opt = sel.options[sel.selectedIndex];
    const precio = parseFloat(opt.dataset.precio||'0')||0;
    document.getElementById('f_precio').value = precio; document.getElementById('f_cantidad').value = 1;
  }
  calcTotalPreview();
}
function bindFacturaForm(){
  const sel = document.getElementById('f_producto'); if(!sel) return;
  sel.addEventListener('change', syncFormFromSelect);
  ['f_precio','f_cantidad'].forEach(id=>{
    const el = document.getElementById(id); if(el) el.addEventListener('input', calcTotalPreview);
  });
  const btnCalc = document.getElementById('f_btn_calc'); if(btnCalc) btnCalc.addEventListener('click', (e)=>{
    e.preventDefault();
    document.getElementById('f_producto').value='calc';
    syncFormFromSelect();
  });
  const btnCrear = document.getElementById('f_btn_crear'); if(btnCrear) btnCrear.addEventListener('click', (e)=>{
    e.preventDefault();
    const sel = document.getElementById('f_producto');
    const nombre = (sel.value==='calc') ? 'Servicio calculadora' : (sel.options[sel.selectedIndex]?.textContent || 'Producto');
    const precio = parseFloat(document.getElementById('f_precio').value||'0')||0;
    const cantidad = parseInt(document.getElementById('f_cantidad').value||'0',10)||0;
    const notas = document.getElementById('f_notas').value||'';
    if(cantidad<=0){ alert('Cantidad inválida'); return; }
    addFactura({producto:nombre, precio, cantidad, notas});
    showToast('Factura creada');
    renderFacturas(); // refresh list
  });
}

// === CONTROL DE VISTAS ===
let __currentView = 'inicio';
function setView(mode){
  __currentView = mode;
  // mode: 'inicio' | 'calculadora' | 'productos' | 'facturas'
  const home = document.getElementById('homeView');
  const productosView = document.getElementById('productosView');
  const grid = document.querySelector('main.wrap .grid');
  const facturasView = document.getElementById('facturasView');
  const rightMenu = document.getElementById('sideMenu');
  const param = document.getElementById('paramSec');
  const bottom = document.getElementById('bottomSummary');
  const leftRailItems = document.querySelectorAll('.left-rail .rail-item');

  // limpiar estados activos
  leftRailItems.forEach(i=>i.classList.remove('active'));

  if(mode==='inicio'){ if(facturasView){ facturasView.classList.add('hidden'); }
    home.classList.remove('hidden');
    productosView.classList.add('hidden');
    grid.classList.add('hidden');
    rightMenu.classList.add('hidden');
    bottom.classList.add('hidden');
    // activar Inicio
    document.querySelector('.left-rail .rail-item[data-view="inicio"]').classList.add('active');
    window.scrollTo({top:0,behavior:'smooth'});
    return;
  }

  // calculadora muestra la grilla
  home.classList.add('hidden');
  productosView.classList.add('hidden');
  grid.classList.remove('hidden');
  rightMenu.classList.remove('hidden');

  if(mode==='calculadora'){
    param.classList.remove('hidden');
    bottom.classList.remove('hidden');
    document.querySelector('.left-rail .rail-item[data-view="calculadora"]').classList.add('active');
    const y = document.getElementById('opcionesSec').getBoundingClientRect().top + window.scrollY - 72;
    window.scrollTo({top:y,behavior:'smooth'});
    return;
  }
  if(mode==='productos'){
    try{ loadCatalog(); renderCatalog(); }catch(e){}
    // vista de productos VACÍA (sin categorías, sin parámetros, sin resumen)
    grid.classList.add('hidden');
    rightMenu.classList.add('hidden');
    param.classList.add('hidden');
    bottom.classList.add('hidden');
    productosView.classList.remove('hidden');
    document.querySelector('.left-rail .rail-item[data-view="productos"]').classList.add('active');
    window.scrollTo({top:productosView.getBoundingClientRect().top + window.scrollY - 72, behavior:'smooth'});
    return;
  }
  if(mode==='facturas'){
    grid.classList.add('hidden');
    rightMenu.classList.add('hidden');
    param.classList.add('hidden');
    bottom.classList.add('hidden');
    productosView.classList.add('hidden');
    if(facturasView){ facturasView.classList.remove('hidden'); }
    try{ loadFacturas(); renderFacturas(); fillFacturaFormProducts(); bindFacturaForm(); syncFormFromSelect(); }catch(e){}
    const it = document.querySelector('.left-rail .rail-item[data-target="#facturasView"]'); if(it) it.classList.add('active');
    window.scrollTo({top:facturasView.getBoundingClientRect().top + window.scrollY - 72, behavior:'smooth'});
    return;
  }
}

// Hijack left-rail behavior to switch views
function initViewSwitcher(){
  const items = document.querySelectorAll('.left-rail .rail-item');
  items.forEach(it=>{
    const v = it.dataset.view;
    if(!v) return;
    it.addEventListener('click', (ev)=>{
      ev.preventDefault();
      ev.stopImmediatePropagation();
      setView(v);
    }, {capture:true});
  });

  // Acciones para 'Seleccionados' y 'Resumen' cuando estén visibles
  const selItem = document.querySelector('.left-rail .rail-item[data-target="#seleccionSec"]');
  if(selItem){
    selItem.addEventListener('click', ()=>{
      // asegura estar en calculadora (para ver resumen completo)
      setView('calculadora');
      const y = document.getElementById('seleccionSec').getBoundingClientRect().top + window.scrollY - 72;
      window.scrollTo({top:y, behavior:'smooth'});
    }, {capture:true});
  }
  const resItem = document.querySelector('.left-rail .rail-item[data-target="#facturasView"]');
  if(resItem){
    resItem.addEventListener('click', ()=>{
      setView('facturas');
    }, {capture:true});
  }
}

// Marcar data-view en los botones principales existentes
(function patchLeftRailLabels(){
  const rail = document.getElementById('leftRail');
  if(!rail) return;
  const items = rail.querySelectorAll('.rail-item');
  items.forEach((it,idx)=>{
    const label = it.querySelector('.rail-label')?.textContent?.trim().toLowerCase();
    if(label==='inicio') it.setAttribute('data-view','inicio');
    if(label==='calculadora') it.setAttribute('data-view','calculadora');
    if(label==='productos') it.setAttribute('data-view','productos');
  });
})();

// Inicialización de vistas
window.addEventListener('load', ()=>{
  try{ loadCatalog(); loadFacturas(); }catch(e){}
  try{ fillFacturaFormProducts(); bindFacturaForm(); syncFormFromSelect(); }catch(e){}
  initViewSwitcher();
  // Vista de inicio por defecto
  setView('inicio'); // cambia a 'inicio' si prefieres arrancar en portada
});


// ====== Mobile sheet (Facturas) ======
(function(){
  const sheet = document.querySelector('#facturasView .invoice-card');
  const fab = document.getElementById('fabNuevaFactura');
  const closeBtn = document.getElementById('sheetClose');
  function isMobile(){ return window.matchMedia('(max-width: 640px)').matches; }
  function openSheet(){ if(sheet && isMobile()){ sheet.classList.add('open'); } }
  function closeSheet(){ if(sheet){ sheet.classList.remove('open'); } }
  fab && fab.addEventListener('click', openSheet);
  closeBtn && closeBtn.addEventListener('click', closeSheet);
  // Cerrar la hoja si cambiamos de vista
  const origSetView = window.setView;
  if(typeof origSetView === 'function'){
    window.setView = function(mode){ closeSheet(); return origSetView(mode); };
  }
  // Si creas una factura en móvil, cerramos la hoja
  const crear = document.getElementById('f_btn_crear');
  if(crear){ crear.addEventListener('click', ()=> setTimeout(closeSheet, 150)); }
  // Cuando se elige "Tomar total de Calculadora", abrir automáticamente
  const tomar = document.getElementById('f_btn_calc');
  if(tomar){ tomar.addEventListener('click', ()=> { if(isMobile()) openSheet(); }); }
})();
(function(){
  const nav = document.getElementById('bottomNav');
  if(!nav) return;
  const btns = nav.querySelectorAll('button');
  function setActive(view){
    btns.forEach(b=> b.classList.toggle('active', b.dataset.view===view));
  }
  btns.forEach(b=>{
    b.addEventListener('click', ()=>{
      const v = b.dataset.view;
      try{ setView(v); }catch(e){}
      setActive(v);
      // scroll top on mobile after switch
      window.scrollTo({top:0,behavior:'smooth'});
    });
  });

  // Hook into global setView to keep states in sync
  const _sv = window.setView;
  window.setView = function(mode){
    try{ _sv(mode); }catch(e){}
    setActive(mode);
  };
})();

// === Normalizador: entradas numéricas vacías/negativas -> 0 ===
function __num(v){ v = parseFloat(v); return (isNaN(v) || v < 0) ? 0 : v; }
function __attachNumberNormalizers(){
  try{
    document.querySelectorAll('input[type="number"]').forEach(inp=>{
      inp.addEventListener('blur', ()=>{
        const v = parseFloat(inp.value);
        if(isNaN(v) || v < 0){ inp.value = 0; }
      });
    });
  }catch(e){}
}
window.addEventListener('load', __attachNumberNormalizers);

// Parchear funciones de cálculo para usar __num defensivo sin reescribir todo
(function(){
  const _conv = window.convertirAMetros;
  window.convertirAMetros = function(valor, unidad){
    valor = __num(valor);
    return _conv ? _conv(valor, unidad) : valor;
  };
  const _calcularMetalica = window.calcularMetalica;
  window.calcularMetalica = function(){
    const res = _calcularMetalica ? _calcularMetalica() : {ml:0, sub:0, incluir:false};
    // clamp defensivo
    return {
      ml: __num(res && res.ml),
      sub: __num(res && res.sub),
      incluir: !!(res && res.incluir)
    };
  };
})();
window.addEventListener('beforeunload', saveUIState);

/* ===================== FACTURA ACTIVA (LÍNEAS) ===================== */
const STORAGE_FA = 'calc_factura_activa_v1';
const STORAGE_FA_HIST = 'calc_facturas_hist_v1';
// IVA dinámico: lee del input de la calculadora
function IVA_EC(){
  const el = document.getElementById('ivaInput');
  const v = parseFloat(el?.value || '0');
  return isNaN(v)?0:v;
}
// (antes: const IVA_EC = 15; // % fijo para líneas)

const mergeLineItems = true; // acumular por defecto
const splitInvoices = true; // NUEVO: cada 'Vender' crea una factura separada

let facturaActiva = null;
let facturasHist = []; // historial de facturas guardadas (resumen + items)

function fa_round2(n){ return Math.round((n + Number.EPSILON) * 100) / 100; }

function fa_new(){
  return {
    id: 'FA' + Date.now().toString(36),
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    estado: 'activa',
    items: [], // array de líneas
    subtotal: 0, iva: 0, total: 0
  };
}
function fa_save(){ try{ localStorage.setItem(STORAGE_FA, JSON.stringify(facturaActiva)); }catch(e){} }
function fa_load(){
  try{ const raw = localStorage.getItem(STORAGE_FA); if(raw){ facturaActiva = JSON.parse(raw);} }catch(e){}
  if(!facturaActiva || typeof facturaActiva !== 'object'){ facturaActiva = fa_new(); fa_save(); }
}
function fa_loadHist(){ try{ const raw = localStorage.getItem(STORAGE_FA_HIST); if(raw){ facturasHist = JSON.parse(raw);} }catch(e){} if(!Array.isArray(facturasHist)) facturasHist = []; }
function fa_saveHist(){ try{ localStorage.setItem(STORAGE_FA_HIST, JSON.stringify(facturasHist)); }catch(e){} }

function fa_render(){
  const tb = document.getElementById('fa_tbody'); if(!tb) return;
  tb.innerHTML = '';
  if(!facturaActiva.items.length){
    tb.innerHTML = '<tr><td colspan="9" class="muted">Sin líneas. Usa “Vender” en la Calculadora.</td></tr>';
  }else{
    facturaActiva.items.forEach((it,idx)=>{
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${idx+1}</td>
        <td>${it.descripcion}</td>
        <td>${it.unidad}</td>
        <td class="t-right">${it.cantidad}</td>
        <td class="t-right">$${it.precio_unitario.toFixed(2)}</td>
        <td class="t-right">$${it.subtotal.toFixed(2)}</td>
        <td class="t-right">$${it.iva.toFixed(2)}</td>
        <td class="t-right">$${it.total.toFixed(2)}</td>
        <td class="fa-actions">
          <button class="btn-sm" data-act="editar" data-id="${it.id_linea}">Editar</button>
          <button class="btn-sm" data-act="eliminar" data-id="${it.id_linea}">Eliminar</button>
        </td>
      `;
      tb.appendChild(tr);
    });
  }
  document.getElementById('fa_subtotal').textContent = '$' + (facturaActiva.subtotal||0).toFixed(2);
  document.getElementById('fa_iva').textContent      = '$' + (facturaActiva.iva||0).toFixed(2);
  document.getElementById('fa_total').textContent    = '$' + (facturaActiva.total||0).toFixed(2);

  // Bind row actions
  tb.querySelectorAll('button[data-act="eliminar"]').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      const id = btn.dataset.id;
      facturaActiva.items = facturaActiva.items.filter(x=>x.id_linea!==id);
      fa_recalc(); fa_save(); fa_render();
    });
  });
  tb.querySelectorAll('button[data-act="editar"]').forEach(btn=>{
    btn.addEventListener('click', ()=> fa_editRow(btn.dataset.id));
  });
}

function fa_recalc(){
  let sub = 0, iva = 0, tot = 0;
  facturaActiva.items.forEach(it=>{ sub += it.subtotal; iva += it.iva; tot += it.total; });
  facturaActiva.subtotal = fa_round2(sub);
  facturaActiva.iva      = fa_round2(iva);
  facturaActiva.total    = fa_round2(tot);
  facturaActiva.updated_at = new Date().toISOString();
}

function fa_editRow(id){
  const tb = document.getElementById('fa_tbody'); if(!tb) return;
  const idx = facturaActiva.items.findIndex(x=>x.id_linea===id);
  if(idx<0) return;
  const it = facturaActiva.items[idx];
  // Build editable row
  const tr = document.createElement('tr');
  tr.innerHTML = `
    <td>${idx+1}</td>
    <td>${it.producto} (${it.ancho.toFixed(2)}×${it.alto.toFixed(2)} m)</td>
    <td>${it.unidad}</td>
    <td><input type="number" min="1" step="1" id="fa_e_qty" value="${it.cantidad}"></td>
    <td><input type="number" min="0" step="0.01" id="fa_e_price" value="${it.precio_unitario.toFixed(2)}"></td>
    <td colspan="2">
      <div style="display:flex;gap:8px;align-items:center">
        <input type="number" min="0" step="0.01" id="fa_e_ancho" value="${it.ancho.toFixed(2)}" style="width:100px">×
        <input type="number" min="0" step="0.01" id="fa_e_alto" value="${it.alto.toFixed(2)}" style="width:100px"> m
        <label class="badge-iva"><input type="checkbox" id="fa_e_iva" ${it.aplica_iva?'checked':''} style="width:auto;margin-right:6px">Aplica IVA</label>
      </div>
    </td>
    <td class="t-right">$${it.total.toFixed(2)}</td>
    <td class="fa-actions">
      <button class="btn-sm primary" id="fa_e_ok">Guardar</button>
      <button class="btn-sm" id="fa_e_cancel">Cancelar</button>
    </td>
  `;
  // Replace the existing row in DOM
  const old = tb.children[idx];
  tb.replaceChild(tr, old);
  document.getElementById('fa_e_cancel').addEventListener('click', fa_render);
  document.getElementById('fa_e_ok').addEventListener('click', ()=>{
    const qty = Math.max(1, parseInt(document.getElementById('fa_e_qty').value||'1',10));
    const price = Math.max(0, parseFloat(document.getElementById('fa_e_price').value||'0'));
    const ancho = Math.max(0, parseFloat(document.getElementById('fa_e_ancho').value||'0'));
    const alto  = Math.max(0, parseFloat(document.getElementById('fa_e_alto').value||'0'));
    const aplica = !!document.getElementById('fa_e_iva').checked;
    // Recalcular
    const factor = (it.unidad==='m²') ? (ancho*alto) : (it.unidad==='ml' ? it.ml : 1);
    const subtotal = fa_round2(price * factor * qty);
    const iva = aplica ? fa_round2(subtotal * (IVA_EC()/100)) : 0;
    const total = fa_round2(subtotal + iva);
    Object.assign(it, {cantidad:qty, precio_unitario:price, ancho, alto, aplica_iva:aplica, subtotal, iva, total,
                       descripcion: `${it.producto} (${ancho.toFixed(2)}×${alto.toFixed(2)} m)`});
    fa_recalc(); fa_save(); fa_render();
  });
}

function fa_keyForMerge(it){
  return [it.producto, it.unidad, it.ancho.toFixed(2), it.alto.toFixed(2), it.precio_unitario.toFixed(4), it.aplica_iva?'1':'0'].join('|');
}

function fa_addLineFromCalc(){
  // Detect selección y dimensiones actuales
  const anchoInput = parseFloat(document.getElementById('ancho')?.value||'0')||0;
  const altoInput  = parseFloat(document.getElementById('alto')?.value||'0')||0;
  const unidadSel  = document.getElementById('unidadMedida')?.value || 'm';
  // conversion a metros
  const toM = (v,u)=>{ if(u==='cm') return v/100; if(u==='in') return v*0.0254; return v; };
  const anchoM = toM(anchoInput, unidadSel);
  const altoM  = toM(altoInput, unidadSel);
  const areaM2 = anchoM*altoM;
  if(areaM2<=0 && seleccion.some(s=>/metro|m²/i.test(s.opt))){
    alert('Dimensiones inválidas. Ingresa ancho y alto.'); return;
  }
  const nowIso = new Date().toISOString();

  // Por cada producto seleccionado, crear/mergear líneas
  (Array.isArray(seleccion)?seleccion:[]).forEach(sel=>{
    const producto = `${sel.cat} ${sel.opt}`.trim();
    let unidad = 'u', factor = 1, ancho=0, alto=0, ml=0;
    if(/metro|m²|cuadrado/i.test(sel.opt)){ unidad = 'm²'; factor = areaM2; ancho = anchoM; alto = altoM; }
    // Metálica se ignora aquí; su panel tiene su propio flujo por ml
    if(sel.cat==='Metálica'){ return; }
    const precio = parseFloat(sel.price||0) || (opciones[sel.cat]&&opciones[sel.cat][sel.opt]) || 0;
    // Validaciones
    if(precio<=0){ return; }

    const cantidad = 1;
    const aplica_iva = true;
    const subtotal = fa_round2(precio * factor * cantidad);
    const iva = aplica_iva ? fa_round2(subtotal * (IVA_EC()/100)) : 0;
    const total = fa_round2(subtotal + iva);
    const linea = {
      id_linea: 'itm_'+Date.now().toString(36)+Math.floor(Math.random()*999).toString(36),
      producto: sel.cat,
      descripcion: `${producto}${unidad==='m²' ? ` (${anchoM.toFixed(2)}×${altoM.toFixed(2)} m)` : ''}`,
      unidad, ancho: anchoM||0, alto: altoM||0, ml,
      cantidad, precio_unitario: precio, aplica_iva,
      subtotal, iva, total, timestamp: nowIso
    };

    if(mergeLineItems){
      const key = fa_keyForMerge(linea);
      const found = facturaActiva.items.find(it=> fa_keyForMerge(it)===key );
      if(found){
        found.cantidad += 1;
        // Recalcular con nueva cantidad
        const factor2 = (found.unidad==='m²') ? (found.ancho*found.alto) : (found.unidad==='ml' ? found.ml : 1);
        found.subtotal = fa_round2(found.precio_unitario * factor2 * found.cantidad);
        found.iva = found.aplica_iva ? fa_round2(found.subtotal * (IVA_EC()/100)) : 0;
        found.total = fa_round2(found.subtotal + found.iva);
      }else{
        facturaActiva.items.push(linea);
      }
    }else{
      facturaActiva.items.push(linea);
    }
  });

  // Metálica (si está incluida y con ml>0)
  try{
    const md = (typeof calcularMetalica==='function') ? calcularMetalica() : {ml:0, sub:0, incluir:false};
    const metalActiva = (typeof metalicaVisible==='function') ? metalicaVisible() : __metalicaActivaFallback();
    if(metalActiva && md && md.incluir && md.ml>0 && md.sub>0){
      const pml = parseFloat(document.getElementById('ml_precio')?.value||'0')||0;
      const linea = {
        id_linea: 'itm_'+Date.now().toString(36)+Math.floor(Math.random()*999).toString(36),
        producto: 'Metálica',
        descripcion: `Metálica (${md.ml.toFixed(2)} ml)`,
        unidad: 'ml', ancho:0, alto:0, ml: md.ml,
        cantidad: 1, precio_unitario: pml, aplica_iva: true,
        subtotal: fa_round2(md.ml * pml * 1),
        iva: fa_round2(md.ml * pml * 1 * (IVA_EC()/100)),
        total: 0, timestamp: nowIso
      };
      linea.total = fa_round2(linea.subtotal + linea.iva);
      if(mergeLineItems){
        const key = fa_keyForMerge(linea);
        const found = facturaActiva.items.find(it=> fa_keyForMerge(it)===key );
        if(found){
          found.cantidad += 1;
          const factor2 = found.ml || 1;
          found.subtotal = fa_round2(found.precio_unitario * factor2 * found.cantidad);
          found.iva = found.aplica_iva ? fa_round2(found.subtotal * (IVA_EC()/100)) : 0;
          found.total = fa_round2(found.subtotal + found.iva);
        }else{
          facturaActiva.items.push(linea);
        }
      }else{
        facturaActiva.items.push(linea);
      }
    }
  }catch(e){}

  fa_recalc(); fa_save(); fa_render();
}

function fa_bindButtons(){
  const venderTotalBtn = document.getElementById('btnVenderTotal');
  if(venderTotalBtn){
    venderTotalBtn.addEventListener('click', (ev)=>{
      ev.preventDefault();
      const prevDisabled = venderTotalBtn.disabled;
      if(splitInvoices){ hist_addInvoiceFromCalc(); } else { fa_addLineFromCalc(); }
      venderTotalBtn.disabled = true;
      venderTotalBtn.classList.add('btn-success');
      const prev = venderTotalBtn.textContent;
      venderTotalBtn.textContent = 'Agregado a Factura';
      setTimeout(()=>{
        venderTotalBtn.disabled = prevDisabled;
        venderTotalBtn.classList.remove('btn-success');
        venderTotalBtn.textContent = prev;
      }, 1000);
      try{ showToast('Agregado a Factura'); }catch(e){}
    }, {capture:true});
  }

  const btnNueva = document.getElementById('fa_btn_nueva');
  if(btnNueva){ btnNueva.addEventListener('click', ()=>{ facturaActiva = fa_new(); fa_save(); fa_render(); }); }

  const btnGuardar = document.getElementById('fa_btn_guardar');
  if(btnGuardar){
    btnGuardar.addEventListener('click', ()=>{
      if(!facturaActiva.items.length){ alert('No hay líneas.'); return; }
      const gPct = parseFloat(document.getElementById('gananciaSlider')?.value || '0') || 0;
const res  = (typeof calcTotales==='function') ? calcTotales({ base: facturaActiva.subtotal, gananciaTipo:'porcentaje', gananciaValor: gPct, ivaRate: IVA_EC() }) : {base:facturaActiva.subtotal, ganancia:{tipo:'porcentaje', porc:gPct, monto: Math.round((facturaActiva.subtotal*(gPct/100))*100)/100}, ivaRate: IVA_EC(), iva: 0, total: 0};
const resumen = {
  id: facturaActiva.id,
  fecha: new Date().toISOString(),
  items: facturaActiva.items,
  subtotal: Number(res.base||0),
  iva: Number(res.iva||0),
  total: Number(res.total||0),
  ganancia: res.ganancia,
  estado: 'cerrada'
};
      facturasHist.unshift(resumen);
      fa_saveHist();
      // iniciar nueva activa
      facturaActiva = fa_new(); fa_save(); fa_render();
      showToast('Factura guardada');
    });
  }
}


/* ---------- Historial (tabla) ---------- */
function hist_render(){
  const tb = document.getElementById('fa_hist_tbody'); if(!tb) return;
  tb.innerHTML = '';
  if(!Array.isArray(facturasHist) || !facturasHist.length){
    tb.innerHTML = '<tr><td colspan="7" class="muted">Sin facturas. Usa “Vender total”.</td></tr>';
    return;
  }
  facturasHist.forEach((f,idx)=>{
    // ADICIÓN: nombre arriba como encabezado independiente
    if(f.nombre){
      const trn = document.createElement('tr');
      trn.className = 'hist-name-row';
      trn.innerHTML = `<td colspan="7">Nombre: ${f.nombre}</td>`;
      tb.appendChild(trn);
    }
    const anticipo = Number(f.anticipo||0);
    const totalF   = Number(f.total||0);
    const isPaid   = (f.estado==='pagado') || (anticipo>=totalF && totalF>0);
    if(isPaid) f.estado = 'pagado'; // normalizar
    
    const tr = document.createElement('tr');
    tr.className = isPaid ? 'row-paid' : '';
    const date = new Date(f.fecha||f.created_at||Date.now());
    const iso  = date.toLocaleString();

    let estadoClass = 'pending', estadoText='Pendiente';
    if(f.estado==='aprobado'){ estadoClass='aprobado'; estadoText='Aprobado'; }
    else if(f.estado==='pagado'){ estadoClass='pagado'; estadoText='Pagado'; }
    else if(f.estado==='anulado'){ estadoClass='anulado'; estadoText='Anulado'; }

    tr.innerHTML = `
      <td>${iso}${(f.nombre? `<div class=\"muted\">Nombre: ${f.nombre}</div>`: ``)}</td>
      <td>${(f.items||[]).length}</td>
      <td class="t-right">$${(f.subtotal||0).toFixed(2)}</td>
      <td class="t-right">$${(f.iva||0).toFixed(2)}</td>
      <td class="t-right ${isPaid?'total-approved':''}">$${(Number(f.total||0)).toFixed(2)}</td>
      <td><span class="status-pill ${estadoClass}" data-act="estado" data-id="${f.id}">${estadoText}</span></td>
      <td class="row-actions">
        <button class="btn-sm" data-act="ver" data-id="${f.id}">Ver</button>
        <button class="btn-sm" data-act="reabrir" data-id="${f.id}">Reabrir</button>
        <button class="btn-sm" data-act="duplicar" data-id="${f.id}">Duplicar</button>
        <button class="btn-sm" data-act="eliminar" data-id="${f.id}">Eliminar</button>
      </td>
    `;
    tb.appendChild(tr);

    // Detalle
    const trd = document.createElement('tr');
    trd.className = 'hist-detail-row hidden';
    trd.dataset.id = f.id;

    const rows = (f.items||[]).map(it=>{
      const desc = it.descripcion || `${it.producto}`;
      const unidad = it.unidad || 'u';
      const qty = (it.cantidad||1);
      const pu  = (it.precio_unitario||0).toFixed(2);
      const sub = (it.subtotal||0).toFixed(2);
      const iv  = (it.iva||0).toFixed(2);
      const tot = (it.total||0).toFixed(2);
      return `<tr>
        <td>${desc}</td>
        <td>${unidad}</td>
        <td class="t-right">${qty}</td>
        <td class="t-right">$${pu}</td>
        <td class="t-right">$${sub}</td>
        <td class="t-right">$${iv}</td>
        <td class="t-right">$${tot}</td>
      </tr>`;
    }).join('');

    const porPagar = Math.max(0, totalF - anticipo);
    const gPct = (f.ganancia && typeof f.ganancia.porc==='number') ? f.ganancia.porc : (parseFloat(document.getElementById('gananciaSlider')?.value||'0'));
    const gMonto = (f.ganancia && typeof f.ganancia.monto==='number') ? f.ganancia.monto : Math.round((Number(f.subtotal||0)*(Number(gPct||0)/100))*100)/100;

    trd.innerHTML = `<td colspan="7">
      <div class="detail-wrap">\n        ${f.nombre ? `<div class="muted" style="margin-bottom:6px;">Nombre: <b>${f.nombre}</b></div>` : ``}
        <table class="detail-table">
          <thead>
            <tr>
              <th>Descripción</th>
              <th>Unidad</th>
              <th>Cantidad</th>
              <th>P. Unitario</th>
              <th>Subtotal</th>
              <th>IVA 15%</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>${rows || '<tr><td colspan="7" class="muted">Sin ítems</td></tr>'}</tbody>
        </table>
        <div class="row-mini"><span class="gain-chip">Ganancia: ${gPct}% ($${gMonto.toFixed(2)})</span>
          <span class="total-chip">Total final: $${(Number(f.total||0)).toFixed(2)}</span>
          <label>Anticipo: $ <input type="number" min="0" step="0.01" id="ant_${f.id}" value="${Number(anticipo).toFixed(2)}"></label>
          <span>Por pagar: <b>$${porPagar.toFixed(2)}</b></span>
          <button class="btn-sm primary" data-act="saveAnt" data-id="${f.id}">Guardar</button>
        </div>
      </div>
    </td>`;
    tb.appendChild(trd);
  });

  // Bind actions
  tb.querySelectorAll('button[data-act="eliminar"]').forEach(b=> b.addEventListener('click', ()=>{
    const id=b.dataset.id; facturasHist = facturasHist.filter(x=>x.id!==id); fa_saveHist(); hist_render();
  }));
  tb.querySelectorAll('button[data-act="duplicar"]').forEach(b=> b.addEventListener('click', ()=>{
    const id=b.dataset.id; const f = facturasHist.find(x=>x.id===id); if(!f) return;
    const copy = JSON.parse(JSON.stringify(f)); copy.id = 'FA'+Date.now().toString(36); copy.fecha = new Date().toISOString();
    facturasHist.unshift(copy); fa_saveHist(); hist_render();
  }));
  tb.querySelectorAll('button[data-act="reabrir"]').forEach(b=> b.addEventListener('click', ()=>{
    const id=b.dataset.id; const f = facturasHist.find(x=>x.id===id); if(!f) return;
    facturaActiva = JSON.parse(JSON.stringify(f)); facturaActiva.estado='activa'; fa_save(); fa_render(); showToast('Factura reabierta');
  }));
  tb.querySelectorAll('button[data-act="ver"]').forEach(b=> b.addEventListener('click', ()=>{
    const id=b.dataset.id;
    const row = tb.querySelector(`.hist-detail-row[data-id="${id}"]`);
    if(row){ row.classList.toggle('hidden'); b.textContent = row.classList.contains('hidden') ? 'Ver' : 'Ocultar'; }
  }));
  tb.querySelectorAll('span[data-act="estado"]').forEach(sp=> sp.addEventListener('click', ()=>{
    const id = sp.dataset.id; const f = facturasHist.find(x=>x.id===id); if(!f) return;
    // ciclo: pendiente -> aprobado -> pagado -> anulado -> pendiente
    const next = f.estado==='pendiente' ? 'aprobado' : (f.estado==='aprobado' ? 'pagado' : (f.estado==='pagado' ? 'anulado' : 'pendiente'));
    f.estado = next; fa_saveHist(); hist_render();
  }));
  tb.querySelectorAll('button[data-act="saveAnt"]').forEach(btn=> btn.addEventListener('click', ()=>{
    const id = btn.dataset.id; const f = facturasHist.find(x=>x.id===id); if(!f) return;
    const inp = document.getElementById('ant_'+id);
    const val = Math.max(0, parseFloat(inp.value||'0')||0);
    f.anticipo = Math.round(val*100)/100;
    if((f.total||0) > 0 && f.anticipo >= f.total){ f.estado='pagado'; }
    fa_saveHist(); hist_render(); showToast('Anticipo guardado');
  }));

}

/* Crear factura completa desde el estado de la Calculadora */
function hist_addInvoiceFromCalc(){
  // Construir items igual que en fa_addLineFromCalc pero agrupados en una sola factura
  const anchoInput = parseFloat(document.getElementById('ancho')?.value||'0')||0;
  const altoInput  = parseFloat(document.getElementById('alto')?.value||'0')||0;
  const unidadSel  = document.getElementById('unidadMedida')?.value || 'm';
  const toM = (v,u)=>{ if(u==='cm') return v/100; if(u==='in') return v*0.0254; return v; };
  const anchoM = toM(anchoInput, unidadSel);
  const altoM  = toM(altoInput, unidadSel);
  const areaM2 = anchoM*altoM;

  const items = [];
  let subtotal = 0, iva = 0, total = 0;
  const pushItem = (it)=>{ items.push(it); subtotal += it.subtotal; iva += it.iva; total += it.total; };

  (Array.isArray(seleccion)?seleccion:[]).forEach(sel=>{
    if(sel.cat==='Metálica') return;
    const producto = `${sel.cat} ${sel.opt}`.trim();
    let unidad = 'u', factor = 1, ancho=0, alto=0, ml=0;
    if(/metro|m²|cuadrado/i.test(sel.opt)){ unidad='m²'; factor = areaM2; ancho=anchoM; alto=altoM; if(!(areaM2>0)) return; }
    const precio = parseFloat(sel.price||0) || (opciones[sel.cat]&&opciones[sel.cat][sel.opt]) || 0;
    if(precio<=0) return;
    const cantidad = 1, aplica_iva = true;
    const sub = Math.round((precio * factor * cantidad)*100)/100;
    const iv  = aplica_iva ? Math.round(sub*(IVA_EC()/100)*100)/100 : 0;
    const tot = Math.round((sub+iv)*100)/100;
    pushItem({
      id_linea: 'itm_'+Date.now().toString(36)+Math.floor(Math.random()*999).toString(36),
      producto: sel.cat,
      descripcion: `${producto}${unidad==='m²' ? ` (${anchoM.toFixed(2)}×${altoM.toFixed(2)} m)` : ''}`,
      unidad, ancho:ancho||0, alto:alto||0, ml,
      cantidad, precio_unitario:precio, aplica_iva:true, subtotal:sub, iva:iv, total:tot,
      timestamp: new Date().toISOString()
    });
  });

  try{
    const md = (typeof calcularMetalica==='function') ? calcularMetalica() : {ml:0, sub:0, incluir:false};
    const metalActiva = (typeof metalicaVisible==='function') ? metalicaVisible() : __metalicaActivaFallback();
    if(metalActiva && md && md.incluir && md.ml>0 && md.sub>0){
      const pml = parseFloat(document.getElementById('ml_precio')?.value||'0')||0;
      const sub = Math.round((md.ml * pml)*100)/100;
      const iv  = Math.round((sub*(IVA_EC()/100))*100)/100;
      const tot = Math.round((sub+iv)*100)/100;
      pushItem({
        id_linea: 'itm_'+Date.now().toString(36)+Math.floor(Math.random()*999).toString(36),
        producto:'Metálica', descripcion:`Metálica (${md.ml.toFixed(2)} ml)`, unidad:'ml', ancho:0, alto:0, ml:md.ml,
        cantidad:1, precio_unitario:pml, aplica_iva:true, subtotal:sub, iva:iv, total:tot, timestamp:new Date().toISOString()
      });
    }
  }catch(e){}

  if(!items.length){ alert('No hay items con dimensiones válidas.'); return; }

  // Construir factura separada
  const gPct = parseFloat(document.getElementById('gananciaSlider')?.value || '0') || 0;
const res  = (typeof calcTotales==='function') ? calcTotales({ base: subtotal, gananciaTipo:'porcentaje', gananciaValor: gPct, ivaRate: IVA_EC() }) : {base:subtotal, ganancia:{tipo:'porcentaje', porc:gPct, monto: Math.round((subtotal*(gPct/100))*100)/100}, ivaRate: IVA_EC(), iva: Math.round(((subtotal*(gPct/100)+subtotal)*(IVA_EC()/100))*100)/100, total: Math.round((subtotal + (subtotal*(gPct/100)) + ((subtotal + (subtotal*(gPct/100)))*(IVA_EC()/100)))*100)/100};
const factura = {
  id: 'FA'+Date.now().toString(36),
  nombre: (document.getElementById('fa_nombre')?.value || '').trim(),
  fecha: new Date().toISOString(),
  estado: 'pendiente',
  anticipo: 0,
  items: items,
  subtotal: Number(res.base||0),
  iva: Number(res.iva||0),
  total: Number(res.total||0),
  ganancia: res.ganancia
};
  facturasHist.unshift(factura); fa_saveHist(); hist_render();
}
function fa_boot(){
  fa_load(); fa_loadHist(); fa_render(); hist_render(); fa_bindButtons();
}
window.addEventListener('load', fa_boot);


// Helper: detecta si 'Metálica' está activa en el menú si no existe metalicaVisible()
function __metalicaActivaFallback(){
  const items = document.querySelectorAll('#sideMenuList .item.active');
  for(const el of items){
    const t = (el.textContent || '').trim();
    if(/Metálica/i.test(t)) return true;
  }
  return false;
}


/** Cálculo consistente de totales (base + ganancia + IVA) */
function calcTotales({base, gananciaTipo='porcentaje', gananciaValor=0, ivaRate=15}){
  const r2 = (x)=> Math.round((x + Number.EPSILON) * 100) / 100;
  base = Number(base)||0; gananciaValor = Number(gananciaValor)||0; ivaRate = Number(ivaRate)||0;
  const gMonto = (gananciaTipo==='porcentaje') ? r2(base * (gananciaValor/100)) : r2(gananciaValor);
  const baseMasGan = r2(base + gMonto);
  const iva = r2(baseMasGan * (ivaRate/100));
  const total = r2(baseMasGan + iva);
  return { base:r2(base), ganancia:{tipo:gananciaTipo, porc:(gananciaTipo==='porcentaje'?gananciaValor:0), monto:gMonto}, baseMasGan, ivaRate, iva, total };
}
</script>
<div id="toast" class="toast" style="display:none"></div>

<!-- Bottom navigation for mobile -->



<!-- ===== Barra inferior Móvil ===== -->
<nav class="mb-nav" id="mbNav">
  <a href="#" data-view="inicio"        id="mbHome">Inicio</a>
  <a href="#" data-view="calculadora"   id="mbCalc">Calculadora</a>
  <button class="fab"                   id="mbVender">Vender</button>
  <a href="#" data-view="productos"     id="mbProd">Catálogo</a>
  <a href="#" data-view="facturas"      id="mbFac">Facturas</a>
</nav>


<script>
(function(){
  function setActive(view){
    document.querySelectorAll('.mb-nav a').forEach(a=>a.classList.remove('active'));
    const el = document.querySelector(`.mb-nav a[data-view="${view}"]`);
    if(el) el.classList.add('active');
  }
  function go(view){
    if(typeof window.setView === 'function'){
      try { window.setView(view); } catch(e){ console.warn('setView falló', e); }
    } else {
      // Fallback opcional: usa <section data-view-section="...">
      document.querySelectorAll('[data-view-section]').forEach(sec=>{
        sec.style.display = (sec.dataset.viewSection === view) ? '' : 'none';
      });
    }
    setActive(view);
    window.__currentView = view;
    window.scrollTo({top:0, behavior:'smooth'});
  }
  document.getElementById('mbNav')?.addEventListener('click', (ev)=>{
    const a = ev.target.closest('a[data-view]');
    if(!a) return;
    ev.preventDefault();
    go(a.getAttribute('data-view'));
  });
  document.getElementById('mbVender')?.addEventListener('click', ()=>{
    const btn = document.getElementById('btnVenderTotal');
    if(btn){ btn.click(); } else { alert('Abre Calculadora y configura antes de vender.'); }
  });
  // Hook: sincroniza la pestaña activa si tu app llama setView desde otros botones
  if(typeof window.setView === 'function'){
    const _old = window.setView;
    window.setView = function(v){ _old(v); setActive(v); };
  }
  // Estado inicial
  document.addEventListener('DOMContentLoaded', ()=>{
    setActive(window.__currentView || 'inicio');
  });
})();
</script>


<script>
(function(){
  const rail = document.querySelector('.left-rail');
  const overlay = document.getElementById('mbOverlay');
  const toggle = document.getElementById('mbToggle');
  function openDrawer(){
    if(!rail) return;
    rail.classList.add('open');
    overlay?.classList.add('show');
    document.body.style.overflow='hidden';
  }
  function closeDrawer(){
    rail?.classList.remove('open');
    overlay?.classList.remove('show');
    document.body.style.overflow='';
  }
  toggle?.addEventListener('click', ()=>{
    if(rail?.classList.contains('open')) closeDrawer(); else openDrawer();
  });
  overlay?.addEventListener('click', closeDrawer);

  // Si el usuario toca "Catálogo" en la barra inferior, abre el drawer
  document.getElementById('mbProd')?.addEventListener('click', ()=>{
    setTimeout(openDrawer, 50);
  });
})();
</script>

</div>
</body>
</html>
